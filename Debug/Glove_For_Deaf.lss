
Glove_For_Deaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004076  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  00004076  000040ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002664  00000000  00000000  00004270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c54  00000000  00000000  000068d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00007528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ef  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228f  00000000  00000000  000078b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bb  00000000  00000000  00009b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d6  00000000  00000000  0000ae01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000bed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094a  00000000  00000000  0000c35e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 bb 12 	call	0x2576	; 0x2576 <main>
      7a:	0c 94 39 20 	jmp	0x4072	; 0x4072 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ed       	ldi	r26, 0xDB	; 219
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ed       	ldi	r24, 0xDB	; 219
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000622 <__nesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__nesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__nesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__nesf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000007a2 <__floatsisf>:
     7a2:	a8 e0       	ldi	r26, 0x08	; 8
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__prologue_saves__+0x12>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	88 27       	eor	r24, r24
     7bc:	b7 fd       	sbrc	r27, 7
     7be:	83 95       	inc	r24
     7c0:	99 27       	eor	r25, r25
     7c2:	aa 27       	eor	r26, r26
     7c4:	bb 27       	eor	r27, r27
     7c6:	b8 2e       	mov	r11, r24
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	41 05       	cpc	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <__floatsisf+0x36>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	3a c0       	rjmp	.+116    	; 0x84c <__floatsisf+0xaa>
     7d8:	88 23       	and	r24, r24
     7da:	a9 f0       	breq	.+42     	; 0x806 <__floatsisf+0x64>
     7dc:	20 30       	cpi	r18, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	38 07       	cpc	r19, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	48 07       	cpc	r20, r24
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	58 07       	cpc	r21, r24
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__floatsisf+0x54>
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	9f ec       	ldi	r25, 0xCF	; 207
     7f4:	30 c0       	rjmp	.+96     	; 0x856 <__floatsisf+0xb4>
     7f6:	ee 24       	eor	r14, r14
     7f8:	ff 24       	eor	r15, r15
     7fa:	87 01       	movw	r16, r14
     7fc:	e2 1a       	sub	r14, r18
     7fe:	f3 0a       	sbc	r15, r19
     800:	04 0b       	sbc	r16, r20
     802:	15 0b       	sbc	r17, r21
     804:	02 c0       	rjmp	.+4      	; 0x80a <__floatsisf+0x68>
     806:	79 01       	movw	r14, r18
     808:	8a 01       	movw	r16, r20
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	c8 2e       	mov	r12, r24
     80e:	d1 2c       	mov	r13, r1
     810:	dc 82       	std	Y+4, r13	; 0x04
     812:	cb 82       	std	Y+3, r12	; 0x03
     814:	ed 82       	std	Y+5, r14	; 0x05
     816:	fe 82       	std	Y+6, r15	; 0x06
     818:	0f 83       	std	Y+7, r16	; 0x07
     81a:	18 87       	std	Y+8, r17	; 0x08
     81c:	c8 01       	movw	r24, r16
     81e:	b7 01       	movw	r22, r14
     820:	0e 94 83 04 	call	0x906	; 0x906 <__clzsi2>
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	18 16       	cp	r1, r24
     828:	19 06       	cpc	r1, r25
     82a:	84 f4       	brge	.+32     	; 0x84c <__floatsisf+0xaa>
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__floatsisf+0x96>
     830:	ee 0c       	add	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	00 1f       	adc	r16, r16
     836:	11 1f       	adc	r17, r17
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__floatsisf+0x8e>
     83c:	ed 82       	std	Y+5, r14	; 0x05
     83e:	fe 82       	std	Y+6, r15	; 0x06
     840:	0f 83       	std	Y+7, r16	; 0x07
     842:	18 87       	std	Y+8, r17	; 0x08
     844:	c8 1a       	sub	r12, r24
     846:	d9 0a       	sbc	r13, r25
     848:	dc 82       	std	Y+4, r13	; 0x04
     84a:	cb 82       	std	Y+3, r12	; 0x03
     84c:	ba 82       	std	Y+2, r11	; 0x02
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__pack_f>
     856:	28 96       	adiw	r28, 0x08	; 8
     858:	e9 e0       	ldi	r30, 0x09	; 9
     85a:	0c 94 27 20 	jmp	0x404e	; 0x404e <__epilogue_restores__+0x12>

0000085e <__fixsfsi>:
     85e:	ac e0       	ldi	r26, 0x0C	; 12
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__prologue_saves__+0x20>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	be 01       	movw	r22, r28
     878:	6b 5f       	subi	r22, 0xFB	; 251
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__unpack_f>
     880:	8d 81       	ldd	r24, Y+5	; 0x05
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	61 f1       	breq	.+88     	; 0x8de <__stack+0x7f>
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	50 f1       	brcs	.+84     	; 0x8de <__stack+0x7f>
     88a:	84 30       	cpi	r24, 0x04	; 4
     88c:	21 f4       	brne	.+8      	; 0x896 <__stack+0x37>
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	88 23       	and	r24, r24
     892:	51 f1       	breq	.+84     	; 0x8e8 <__stack+0x89>
     894:	2e c0       	rjmp	.+92     	; 0x8f2 <__stack+0x93>
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	37 fd       	sbrc	r19, 7
     89c:	20 c0       	rjmp	.+64     	; 0x8de <__stack+0x7f>
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	2f 31       	cpi	r18, 0x1F	; 31
     8a2:	31 05       	cpc	r19, r1
     8a4:	1c f0       	brlt	.+6      	; 0x8ac <__stack+0x4d>
     8a6:	66 23       	and	r22, r22
     8a8:	f9 f0       	breq	.+62     	; 0x8e8 <__stack+0x89>
     8aa:	23 c0       	rjmp	.+70     	; 0x8f2 <__stack+0x93>
     8ac:	8e e1       	ldi	r24, 0x1E	; 30
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	56 95       	lsr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	66 23       	and	r22, r22
     8cc:	b1 f0       	breq	.+44     	; 0x8fa <__stack+0x9b>
     8ce:	50 95       	com	r21
     8d0:	40 95       	com	r20
     8d2:	30 95       	com	r19
     8d4:	21 95       	neg	r18
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	4f 4f       	sbci	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	5f e7       	ldi	r21, 0x7F	; 127
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e8       	ldi	r21, 0x80	; 128
     8fa:	b9 01       	movw	r22, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	2c 96       	adiw	r28, 0x0c	; 12
     900:	e2 e0       	ldi	r30, 0x02	; 2
     902:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__epilogue_restores__+0x20>

00000906 <__clzsi2>:
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	7b 01       	movw	r14, r22
     910:	8c 01       	movw	r16, r24
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	e8 16       	cp	r14, r24
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	f8 06       	cpc	r15, r24
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 07       	cpc	r16, r24
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	18 07       	cpc	r17, r24
     922:	88 f4       	brcc	.+34     	; 0x946 <__clzsi2+0x40>
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	e8 16       	cp	r14, r24
     928:	f1 04       	cpc	r15, r1
     92a:	01 05       	cpc	r16, r1
     92c:	11 05       	cpc	r17, r1
     92e:	31 f0       	breq	.+12     	; 0x93c <__clzsi2+0x36>
     930:	28 f0       	brcs	.+10     	; 0x93c <__clzsi2+0x36>
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	17 c0       	rjmp	.+46     	; 0x96a <__clzsi2+0x64>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	12 c0       	rjmp	.+36     	; 0x96a <__clzsi2+0x64>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	e8 16       	cp	r14, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	f8 06       	cpc	r15, r24
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	08 07       	cpc	r16, r24
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	18 07       	cpc	r17, r24
     956:	28 f0       	brcs	.+10     	; 0x962 <__clzsi2+0x5c>
     958:	88 e1       	ldi	r24, 0x18	; 24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x64>
     962:	80 e1       	ldi	r24, 0x10	; 16
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	20 e2       	ldi	r18, 0x20	; 32
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	28 1b       	sub	r18, r24
     974:	39 0b       	sbc	r19, r25
     976:	4a 0b       	sbc	r20, r26
     978:	5b 0b       	sbc	r21, r27
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__clzsi2+0x7e>
     97c:	16 95       	lsr	r17
     97e:	07 95       	ror	r16
     980:	f7 94       	ror	r15
     982:	e7 94       	ror	r14
     984:	8a 95       	dec	r24
     986:	d2 f7       	brpl	.-12     	; 0x97c <__clzsi2+0x76>
     988:	f7 01       	movw	r30, r14
     98a:	ed 51       	subi	r30, 0x1D	; 29
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	80 81       	ld	r24, Z
     990:	28 1b       	sub	r18, r24
     992:	31 09       	sbc	r19, r1
     994:	41 09       	sbc	r20, r1
     996:	51 09       	sbc	r21, r1
     998:	c9 01       	movw	r24, r18
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	08 95       	ret

000009a4 <__pack_f>:
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	fc 01       	movw	r30, r24
     9b0:	e4 80       	ldd	r14, Z+4	; 0x04
     9b2:	f5 80       	ldd	r15, Z+5	; 0x05
     9b4:	06 81       	ldd	r16, Z+6	; 0x06
     9b6:	17 81       	ldd	r17, Z+7	; 0x07
     9b8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ba:	80 81       	ld	r24, Z
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	48 f4       	brcc	.+18     	; 0x9d2 <__pack_f+0x2e>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	a0 e1       	ldi	r26, 0x10	; 16
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	e8 2a       	or	r14, r24
     9ca:	f9 2a       	or	r15, r25
     9cc:	0a 2b       	or	r16, r26
     9ce:	1b 2b       	or	r17, r27
     9d0:	a5 c0       	rjmp	.+330    	; 0xb1c <__pack_f+0x178>
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <__pack_f+0x34>
     9d6:	9f c0       	rjmp	.+318    	; 0xb16 <__pack_f+0x172>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	21 f4       	brne	.+8      	; 0x9e4 <__pack_f+0x40>
     9dc:	ee 24       	eor	r14, r14
     9de:	ff 24       	eor	r15, r15
     9e0:	87 01       	movw	r16, r14
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <__pack_f+0x4a>
     9e4:	e1 14       	cp	r14, r1
     9e6:	f1 04       	cpc	r15, r1
     9e8:	01 05       	cpc	r16, r1
     9ea:	11 05       	cpc	r17, r1
     9ec:	19 f4       	brne	.+6      	; 0x9f4 <__pack_f+0x50>
     9ee:	e0 e0       	ldi	r30, 0x00	; 0
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	96 c0       	rjmp	.+300    	; 0xb20 <__pack_f+0x17c>
     9f4:	62 81       	ldd	r22, Z+2	; 0x02
     9f6:	73 81       	ldd	r23, Z+3	; 0x03
     9f8:	9f ef       	ldi	r25, 0xFF	; 255
     9fa:	62 38       	cpi	r22, 0x82	; 130
     9fc:	79 07       	cpc	r23, r25
     9fe:	0c f0       	brlt	.+2      	; 0xa02 <__pack_f+0x5e>
     a00:	5b c0       	rjmp	.+182    	; 0xab8 <__pack_f+0x114>
     a02:	22 e8       	ldi	r18, 0x82	; 130
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	26 1b       	sub	r18, r22
     a08:	37 0b       	sbc	r19, r23
     a0a:	2a 31       	cpi	r18, 0x1A	; 26
     a0c:	31 05       	cpc	r19, r1
     a0e:	2c f0       	brlt	.+10     	; 0xa1a <__pack_f+0x76>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	2a c0       	rjmp	.+84     	; 0xa6e <__pack_f+0xca>
     a1a:	b8 01       	movw	r22, r16
     a1c:	a7 01       	movw	r20, r14
     a1e:	02 2e       	mov	r0, r18
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__pack_f+0x86>
     a22:	76 95       	lsr	r23
     a24:	67 95       	ror	r22
     a26:	57 95       	ror	r21
     a28:	47 95       	ror	r20
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__pack_f+0x7e>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x9c>
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	aa 1f       	adc	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	2a 95       	dec	r18
     a42:	d2 f7       	brpl	.-12     	; 0xa38 <__pack_f+0x94>
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	a1 09       	sbc	r26, r1
     a48:	b1 09       	sbc	r27, r1
     a4a:	8e 21       	and	r24, r14
     a4c:	9f 21       	and	r25, r15
     a4e:	a0 23       	and	r26, r16
     a50:	b1 23       	and	r27, r17
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	21 f0       	breq	.+8      	; 0xa62 <__pack_f+0xbe>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	9a 01       	movw	r18, r20
     a64:	ab 01       	movw	r20, r22
     a66:	28 2b       	or	r18, r24
     a68:	39 2b       	or	r19, r25
     a6a:	4a 2b       	or	r20, r26
     a6c:	5b 2b       	or	r21, r27
     a6e:	da 01       	movw	r26, r20
     a70:	c9 01       	movw	r24, r18
     a72:	8f 77       	andi	r24, 0x7F	; 127
     a74:	90 70       	andi	r25, 0x00	; 0
     a76:	a0 70       	andi	r26, 0x00	; 0
     a78:	b0 70       	andi	r27, 0x00	; 0
     a7a:	80 34       	cpi	r24, 0x40	; 64
     a7c:	91 05       	cpc	r25, r1
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	39 f4       	brne	.+14     	; 0xa92 <__pack_f+0xee>
     a84:	27 ff       	sbrs	r18, 7
     a86:	09 c0       	rjmp	.+18     	; 0xa9a <__pack_f+0xf6>
     a88:	20 5c       	subi	r18, 0xC0	; 192
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	4f 4f       	sbci	r20, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__pack_f+0xf6>
     a92:	21 5c       	subi	r18, 0xC1	; 193
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	4f 4f       	sbci	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	e0 e0       	ldi	r30, 0x00	; 0
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	20 30       	cpi	r18, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	3a 07       	cpc	r19, r26
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	4a 07       	cpc	r20, r26
     aa8:	a0 e4       	ldi	r26, 0x40	; 64
     aaa:	5a 07       	cpc	r21, r26
     aac:	10 f0       	brcs	.+4      	; 0xab2 <__pack_f+0x10e>
     aae:	e1 e0       	ldi	r30, 0x01	; 1
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	79 01       	movw	r14, r18
     ab4:	8a 01       	movw	r16, r20
     ab6:	27 c0       	rjmp	.+78     	; 0xb06 <__pack_f+0x162>
     ab8:	60 38       	cpi	r22, 0x80	; 128
     aba:	71 05       	cpc	r23, r1
     abc:	64 f5       	brge	.+88     	; 0xb16 <__pack_f+0x172>
     abe:	fb 01       	movw	r30, r22
     ac0:	e1 58       	subi	r30, 0x81	; 129
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	d8 01       	movw	r26, r16
     ac6:	c7 01       	movw	r24, r14
     ac8:	8f 77       	andi	r24, 0x7F	; 127
     aca:	90 70       	andi	r25, 0x00	; 0
     acc:	a0 70       	andi	r26, 0x00	; 0
     ace:	b0 70       	andi	r27, 0x00	; 0
     ad0:	80 34       	cpi	r24, 0x40	; 64
     ad2:	91 05       	cpc	r25, r1
     ad4:	a1 05       	cpc	r26, r1
     ad6:	b1 05       	cpc	r27, r1
     ad8:	39 f4       	brne	.+14     	; 0xae8 <__pack_f+0x144>
     ada:	e7 fe       	sbrs	r14, 7
     adc:	0d c0       	rjmp	.+26     	; 0xaf8 <__pack_f+0x154>
     ade:	80 e4       	ldi	r24, 0x40	; 64
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__pack_f+0x14c>
     ae8:	8f e3       	ldi	r24, 0x3F	; 63
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e8 0e       	add	r14, r24
     af2:	f9 1e       	adc	r15, r25
     af4:	0a 1f       	adc	r16, r26
     af6:	1b 1f       	adc	r17, r27
     af8:	17 ff       	sbrs	r17, 7
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x162>
     afc:	16 95       	lsr	r17
     afe:	07 95       	ror	r16
     b00:	f7 94       	ror	r15
     b02:	e7 94       	ror	r14
     b04:	31 96       	adiw	r30, 0x01	; 1
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	16 95       	lsr	r17
     b0a:	07 95       	ror	r16
     b0c:	f7 94       	ror	r15
     b0e:	e7 94       	ror	r14
     b10:	8a 95       	dec	r24
     b12:	d1 f7       	brne	.-12     	; 0xb08 <__pack_f+0x164>
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <__pack_f+0x17c>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	ef ef       	ldi	r30, 0xFF	; 255
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	6e 2f       	mov	r22, r30
     b22:	67 95       	ror	r22
     b24:	66 27       	eor	r22, r22
     b26:	67 95       	ror	r22
     b28:	90 2f       	mov	r25, r16
     b2a:	9f 77       	andi	r25, 0x7F	; 127
     b2c:	d7 94       	ror	r13
     b2e:	dd 24       	eor	r13, r13
     b30:	d7 94       	ror	r13
     b32:	8e 2f       	mov	r24, r30
     b34:	86 95       	lsr	r24
     b36:	49 2f       	mov	r20, r25
     b38:	46 2b       	or	r20, r22
     b3a:	58 2f       	mov	r21, r24
     b3c:	5d 29       	or	r21, r13
     b3e:	b7 01       	movw	r22, r14
     b40:	ca 01       	movw	r24, r20
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	08 95       	ret

00000b4e <__unpack_f>:
     b4e:	fc 01       	movw	r30, r24
     b50:	db 01       	movw	r26, r22
     b52:	40 81       	ld	r20, Z
     b54:	51 81       	ldd	r21, Z+1	; 0x01
     b56:	22 81       	ldd	r18, Z+2	; 0x02
     b58:	62 2f       	mov	r22, r18
     b5a:	6f 77       	andi	r22, 0x7F	; 127
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	22 1f       	adc	r18, r18
     b60:	22 27       	eor	r18, r18
     b62:	22 1f       	adc	r18, r18
     b64:	93 81       	ldd	r25, Z+3	; 0x03
     b66:	89 2f       	mov	r24, r25
     b68:	88 0f       	add	r24, r24
     b6a:	82 2b       	or	r24, r18
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	99 1f       	adc	r25, r25
     b72:	99 27       	eor	r25, r25
     b74:	99 1f       	adc	r25, r25
     b76:	11 96       	adiw	r26, 0x01	; 1
     b78:	9c 93       	st	X, r25
     b7a:	11 97       	sbiw	r26, 0x01	; 1
     b7c:	21 15       	cp	r18, r1
     b7e:	31 05       	cpc	r19, r1
     b80:	a9 f5       	brne	.+106    	; 0xbec <__unpack_f+0x9e>
     b82:	41 15       	cp	r20, r1
     b84:	51 05       	cpc	r21, r1
     b86:	61 05       	cpc	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	11 f4       	brne	.+4      	; 0xb90 <__unpack_f+0x42>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	37 c0       	rjmp	.+110    	; 0xbfe <__unpack_f+0xb0>
     b90:	82 e8       	ldi	r24, 0x82	; 130
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	13 96       	adiw	r26, 0x03	; 3
     b96:	9c 93       	st	X, r25
     b98:	8e 93       	st	-X, r24
     b9a:	12 97       	sbiw	r26, 0x02	; 2
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	22 0f       	add	r18, r18
     ba4:	33 1f       	adc	r19, r19
     ba6:	44 1f       	adc	r20, r20
     ba8:	55 1f       	adc	r21, r21
     baa:	6a 95       	dec	r22
     bac:	d1 f7       	brne	.-12     	; 0xba2 <__unpack_f+0x54>
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	8c 93       	st	X, r24
     bb2:	0d c0       	rjmp	.+26     	; 0xbce <__unpack_f+0x80>
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	44 1f       	adc	r20, r20
     bba:	55 1f       	adc	r21, r21
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	8d 91       	ld	r24, X+
     bc0:	9c 91       	ld	r25, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	13 96       	adiw	r26, 0x03	; 3
     bc8:	9c 93       	st	X, r25
     bca:	8e 93       	st	-X, r24
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	20 30       	cpi	r18, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	38 07       	cpc	r19, r24
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	48 07       	cpc	r20, r24
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	58 07       	cpc	r21, r24
     bdc:	58 f3       	brcs	.-42     	; 0xbb4 <__unpack_f+0x66>
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	2d 93       	st	X+, r18
     be2:	3d 93       	st	X+, r19
     be4:	4d 93       	st	X+, r20
     be6:	5c 93       	st	X, r21
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret
     bec:	2f 3f       	cpi	r18, 0xFF	; 255
     bee:	31 05       	cpc	r19, r1
     bf0:	79 f4       	brne	.+30     	; 0xc10 <__unpack_f+0xc2>
     bf2:	41 15       	cp	r20, r1
     bf4:	51 05       	cpc	r21, r1
     bf6:	61 05       	cpc	r22, r1
     bf8:	71 05       	cpc	r23, r1
     bfa:	19 f4       	brne	.+6      	; 0xc02 <__unpack_f+0xb4>
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	8c 93       	st	X, r24
     c00:	08 95       	ret
     c02:	64 ff       	sbrs	r22, 4
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <__unpack_f+0xbe>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8c 93       	st	X, r24
     c0a:	12 c0       	rjmp	.+36     	; 0xc30 <__unpack_f+0xe2>
     c0c:	1c 92       	st	X, r1
     c0e:	10 c0       	rjmp	.+32     	; 0xc30 <__unpack_f+0xe2>
     c10:	2f 57       	subi	r18, 0x7F	; 127
     c12:	30 40       	sbci	r19, 0x00	; 0
     c14:	13 96       	adiw	r26, 0x03	; 3
     c16:	3c 93       	st	X, r19
     c18:	2e 93       	st	-X, r18
     c1a:	12 97       	sbiw	r26, 0x02	; 2
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	8c 93       	st	X, r24
     c20:	87 e0       	ldi	r24, 0x07	; 7
     c22:	44 0f       	add	r20, r20
     c24:	55 1f       	adc	r21, r21
     c26:	66 1f       	adc	r22, r22
     c28:	77 1f       	adc	r23, r23
     c2a:	8a 95       	dec	r24
     c2c:	d1 f7       	brne	.-12     	; 0xc22 <__unpack_f+0xd4>
     c2e:	70 64       	ori	r23, 0x40	; 64
     c30:	14 96       	adiw	r26, 0x04	; 4
     c32:	4d 93       	st	X+, r20
     c34:	5d 93       	st	X+, r21
     c36:	6d 93       	st	X+, r22
     c38:	7c 93       	st	X, r23
     c3a:	17 97       	sbiw	r26, 0x07	; 7
     c3c:	08 95       	ret

00000c3e <__fpcmp_parts_f>:
     c3e:	1f 93       	push	r17
     c40:	dc 01       	movw	r26, r24
     c42:	fb 01       	movw	r30, r22
     c44:	9c 91       	ld	r25, X
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	08 f4       	brcc	.+2      	; 0xc4c <__fpcmp_parts_f+0xe>
     c4a:	47 c0       	rjmp	.+142    	; 0xcda <__fpcmp_parts_f+0x9c>
     c4c:	80 81       	ld	r24, Z
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	08 f4       	brcc	.+2      	; 0xc54 <__fpcmp_parts_f+0x16>
     c52:	43 c0       	rjmp	.+134    	; 0xcda <__fpcmp_parts_f+0x9c>
     c54:	94 30       	cpi	r25, 0x04	; 4
     c56:	51 f4       	brne	.+20     	; 0xc6c <__fpcmp_parts_f+0x2e>
     c58:	11 96       	adiw	r26, 0x01	; 1
     c5a:	1c 91       	ld	r17, X
     c5c:	84 30       	cpi	r24, 0x04	; 4
     c5e:	99 f5       	brne	.+102    	; 0xcc6 <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	68 2f       	mov	r22, r24
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	61 1b       	sub	r22, r17
     c68:	71 09       	sbc	r23, r1
     c6a:	3f c0       	rjmp	.+126    	; 0xcea <__fpcmp_parts_f+0xac>
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	21 f0       	breq	.+8      	; 0xc78 <__fpcmp_parts_f+0x3a>
     c70:	92 30       	cpi	r25, 0x02	; 2
     c72:	31 f4       	brne	.+12     	; 0xc80 <__fpcmp_parts_f+0x42>
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	b9 f1       	breq	.+110    	; 0xce6 <__fpcmp_parts_f+0xa8>
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	88 23       	and	r24, r24
     c7c:	89 f1       	breq	.+98     	; 0xce0 <__fpcmp_parts_f+0xa2>
     c7e:	2d c0       	rjmp	.+90     	; 0xcda <__fpcmp_parts_f+0x9c>
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	1c 91       	ld	r17, X
     c84:	11 97       	sbiw	r26, 0x01	; 1
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	f1 f0       	breq	.+60     	; 0xcc6 <__fpcmp_parts_f+0x88>
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	18 17       	cp	r17, r24
     c8e:	d9 f4       	brne	.+54     	; 0xcc6 <__fpcmp_parts_f+0x88>
     c90:	12 96       	adiw	r26, 0x02	; 2
     c92:	2d 91       	ld	r18, X+
     c94:	3c 91       	ld	r19, X
     c96:	13 97       	sbiw	r26, 0x03	; 3
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	82 17       	cp	r24, r18
     c9e:	93 07       	cpc	r25, r19
     ca0:	94 f0       	brlt	.+36     	; 0xcc6 <__fpcmp_parts_f+0x88>
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	bc f0       	brlt	.+46     	; 0xcd6 <__fpcmp_parts_f+0x98>
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	8d 91       	ld	r24, X+
     cac:	9d 91       	ld	r25, X+
     cae:	0d 90       	ld	r0, X+
     cb0:	bc 91       	ld	r27, X
     cb2:	a0 2d       	mov	r26, r0
     cb4:	24 81       	ldd	r18, Z+4	; 0x04
     cb6:	35 81       	ldd	r19, Z+5	; 0x05
     cb8:	46 81       	ldd	r20, Z+6	; 0x06
     cba:	57 81       	ldd	r21, Z+7	; 0x07
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	4a 07       	cpc	r20, r26
     cc2:	5b 07       	cpc	r21, r27
     cc4:	18 f4       	brcc	.+6      	; 0xccc <__fpcmp_parts_f+0x8e>
     cc6:	11 23       	and	r17, r17
     cc8:	41 f0       	breq	.+16     	; 0xcda <__fpcmp_parts_f+0x9c>
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <__fpcmp_parts_f+0xa2>
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	a4 07       	cpc	r26, r20
     cd2:	b5 07       	cpc	r27, r21
     cd4:	40 f4       	brcc	.+16     	; 0xce6 <__fpcmp_parts_f+0xa8>
     cd6:	11 23       	and	r17, r17
     cd8:	19 f0       	breq	.+6      	; 0xce0 <__fpcmp_parts_f+0xa2>
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	05 c0       	rjmp	.+10     	; 0xcea <__fpcmp_parts_f+0xac>
     ce0:	6f ef       	ldi	r22, 0xFF	; 255
     ce2:	7f ef       	ldi	r23, 0xFF	; 255
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <__fpcmp_parts_f+0xac>
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	cb 01       	movw	r24, r22
     cec:	1f 91       	pop	r17
     cee:	08 95       	ret

00000cf0 <M_DIO_Void_SetPinDirection>:
 */

#include <DIO_Interface.h>
#include "DIO_Private.h"
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num,u8 state)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	2a 97       	sbiw	r28, 0x0a	; 10
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	8b 83       	std	Y+3, r24	; 0x03
     d06:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9a e0       	ldi	r25, 0x0A	; 10
     d0c:	69 2f       	mov	r22, r25
     d0e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
     d12:	89 2f       	mov	r24, r25
     d14:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9a e0       	ldi	r25, 0x0A	; 10
     d1a:	69 2f       	mov	r22, r25
     d1c:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
     d20:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3a 87       	std	Y+10, r19	; 0x0a
     d2a:	29 87       	std	Y+9, r18	; 0x09
     d2c:	89 85       	ldd	r24, Y+9	; 0x09
     d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	39 f0       	breq	.+14     	; 0xd42 <M_DIO_Void_SetPinDirection+0x52>
     d34:	29 85       	ldd	r18, Y+9	; 0x09
     d36:	3a 85       	ldd	r19, Y+10	; 0x0a
     d38:	21 30       	cpi	r18, 0x01	; 1
     d3a:	31 05       	cpc	r19, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <M_DIO_Void_SetPinDirection+0x50>
     d3e:	76 c0       	rjmp	.+236    	; 0xe2c <M_DIO_Void_SetPinDirection+0x13c>
     d40:	e4 c0       	rjmp	.+456    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Port)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	38 87       	std	Y+8, r19	; 0x08
     d4a:	2f 83       	std	Y+7, r18	; 0x07
     d4c:	8f 81       	ldd	r24, Y+7	; 0x07
     d4e:	98 85       	ldd	r25, Y+8	; 0x08
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	91 05       	cpc	r25, r1
     d54:	61 f1       	breq	.+88     	; 0xdae <M_DIO_Void_SetPinDirection+0xbe>
     d56:	2f 81       	ldd	r18, Y+7	; 0x07
     d58:	38 85       	ldd	r19, Y+8	; 0x08
     d5a:	23 30       	cpi	r18, 0x03	; 3
     d5c:	31 05       	cpc	r19, r1
     d5e:	34 f4       	brge	.+12     	; 0xd6c <M_DIO_Void_SetPinDirection+0x7c>
     d60:	8f 81       	ldd	r24, Y+7	; 0x07
     d62:	98 85       	ldd	r25, Y+8	; 0x08
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	69 f0       	breq	.+26     	; 0xd84 <M_DIO_Void_SetPinDirection+0x94>
     d6a:	cf c0       	rjmp	.+414    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
     d6c:	2f 81       	ldd	r18, Y+7	; 0x07
     d6e:	38 85       	ldd	r19, Y+8	; 0x08
     d70:	23 30       	cpi	r18, 0x03	; 3
     d72:	31 05       	cpc	r19, r1
     d74:	89 f1       	breq	.+98     	; 0xdd8 <M_DIO_Void_SetPinDirection+0xe8>
     d76:	8f 81       	ldd	r24, Y+7	; 0x07
     d78:	98 85       	ldd	r25, Y+8	; 0x08
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <M_DIO_Void_SetPinDirection+0x92>
     d80:	40 c0       	rjmp	.+128    	; 0xe02 <M_DIO_Void_SetPinDirection+0x112>
     d82:	c3 c0       	rjmp	.+390    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <M_DIO_Void_SetPinDirection+0xb2>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <M_DIO_Void_SetPinDirection+0xae>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	ae c0       	rjmp	.+348    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
     dae:	a7 e3       	ldi	r26, 0x37	; 55
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e3       	ldi	r30, 0x37	; 55
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <M_DIO_Void_SetPinDirection+0xdc>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <M_DIO_Void_SetPinDirection+0xd8>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	99 c0       	rjmp	.+306    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <M_DIO_Void_SetPinDirection+0x106>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <M_DIO_Void_SetPinDirection+0x102>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	84 c0       	rjmp	.+264    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
     e02:	a1 e3       	ldi	r26, 0x31	; 49
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e1 e3       	ldi	r30, 0x31	; 49
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <M_DIO_Void_SetPinDirection+0x130>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <M_DIO_Void_SetPinDirection+0x12c>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	6f c0       	rjmp	.+222    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Port)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3e 83       	std	Y+6, r19	; 0x06
     e34:	2d 83       	std	Y+5, r18	; 0x05
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	91 05       	cpc	r25, r1
     e3e:	51 f1       	breq	.+84     	; 0xe94 <M_DIO_Void_SetPinDirection+0x1a4>
     e40:	2d 81       	ldd	r18, Y+5	; 0x05
     e42:	3e 81       	ldd	r19, Y+6	; 0x06
     e44:	23 30       	cpi	r18, 0x03	; 3
     e46:	31 05       	cpc	r19, r1
     e48:	34 f4       	brge	.+12     	; 0xe56 <M_DIO_Void_SetPinDirection+0x166>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	61 f0       	breq	.+24     	; 0xe6c <M_DIO_Void_SetPinDirection+0x17c>
     e54:	5a c0       	rjmp	.+180    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
     e56:	2d 81       	ldd	r18, Y+5	; 0x05
     e58:	3e 81       	ldd	r19, Y+6	; 0x06
     e5a:	23 30       	cpi	r18, 0x03	; 3
     e5c:	31 05       	cpc	r19, r1
     e5e:	71 f1       	breq	.+92     	; 0xebc <M_DIO_Void_SetPinDirection+0x1cc>
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	91 05       	cpc	r25, r1
     e68:	e9 f1       	breq	.+122    	; 0xee4 <M_DIO_Void_SetPinDirection+0x1f4>
     e6a:	4f c0       	rjmp	.+158    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
     e6c:	aa e3       	ldi	r26, 0x3A	; 58
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <M_DIO_Void_SetPinDirection+0x19a>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <M_DIO_Void_SetPinDirection+0x196>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	3b c0       	rjmp	.+118    	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
     e94:	a7 e3       	ldi	r26, 0x37	; 55
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e3       	ldi	r30, 0x37	; 55
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <M_DIO_Void_SetPinDirection+0x1c2>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <M_DIO_Void_SetPinDirection+0x1be>
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	27 c0       	rjmp	.+78     	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
     ebc:	a4 e3       	ldi	r26, 0x34	; 52
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e3       	ldi	r30, 0x34	; 52
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <M_DIO_Void_SetPinDirection+0x1ea>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <M_DIO_Void_SetPinDirection+0x1e6>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	13 c0       	rjmp	.+38     	; 0xf0a <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <M_DIO_Void_SetPinDirection+0x212>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <M_DIO_Void_SetPinDirection+0x20e>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
     f0a:	2a 96       	adiw	r28, 0x0a	; 10
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <M_DIO_Void_SetPinValue>:
void M_DIO_Void_SetPinValue(u8 Copy_U8_Num,u8 state)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2a 97       	sbiw	r28, 0x0a	; 10
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	8b 83       	std	Y+3, r24	; 0x03
     f32:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9a e0       	ldi	r25, 0x0A	; 10
     f38:	69 2f       	mov	r22, r25
     f3a:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
     f3e:	89 2f       	mov	r24, r25
     f40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9a e0       	ldi	r25, 0x0A	; 10
     f46:	69 2f       	mov	r22, r25
     f48:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
     f4c:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3a 87       	std	Y+10, r19	; 0x0a
     f56:	29 87       	std	Y+9, r18	; 0x09
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	39 f0       	breq	.+14     	; 0xf6e <M_DIO_Void_SetPinValue+0x52>
     f60:	29 85       	ldd	r18, Y+9	; 0x09
     f62:	3a 85       	ldd	r19, Y+10	; 0x0a
     f64:	21 30       	cpi	r18, 0x01	; 1
     f66:	31 05       	cpc	r19, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <M_DIO_Void_SetPinValue+0x50>
     f6a:	76 c0       	rjmp	.+236    	; 0x1058 <M_DIO_Void_SetPinValue+0x13c>
     f6c:	e4 c0       	rjmp	.+456    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Port)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	38 87       	std	Y+8, r19	; 0x08
     f76:	2f 83       	std	Y+7, r18	; 0x07
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	61 f1       	breq	.+88     	; 0xfda <M_DIO_Void_SetPinValue+0xbe>
     f82:	2f 81       	ldd	r18, Y+7	; 0x07
     f84:	38 85       	ldd	r19, Y+8	; 0x08
     f86:	23 30       	cpi	r18, 0x03	; 3
     f88:	31 05       	cpc	r19, r1
     f8a:	34 f4       	brge	.+12     	; 0xf98 <M_DIO_Void_SetPinValue+0x7c>
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	69 f0       	breq	.+26     	; 0xfb0 <M_DIO_Void_SetPinValue+0x94>
     f96:	cf c0       	rjmp	.+414    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
     f98:	2f 81       	ldd	r18, Y+7	; 0x07
     f9a:	38 85       	ldd	r19, Y+8	; 0x08
     f9c:	23 30       	cpi	r18, 0x03	; 3
     f9e:	31 05       	cpc	r19, r1
     fa0:	89 f1       	breq	.+98     	; 0x1004 <M_DIO_Void_SetPinValue+0xe8>
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	98 85       	ldd	r25, Y+8	; 0x08
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <M_DIO_Void_SetPinValue+0x92>
     fac:	40 c0       	rjmp	.+128    	; 0x102e <M_DIO_Void_SetPinValue+0x112>
     fae:	c3 c0       	rjmp	.+390    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <M_DIO_Void_SetPinValue+0xb2>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <M_DIO_Void_SetPinValue+0xae>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	ae c0       	rjmp	.+348    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
     fda:	a8 e3       	ldi	r26, 0x38	; 56
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e3       	ldi	r30, 0x38	; 56
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <M_DIO_Void_SetPinValue+0xdc>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <M_DIO_Void_SetPinValue+0xd8>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	99 c0       	rjmp	.+306    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <M_DIO_Void_SetPinValue+0x106>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <M_DIO_Void_SetPinValue+0x102>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	84 c0       	rjmp	.+264    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    102e:	a2 e3       	ldi	r26, 0x32	; 50
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e2 e3       	ldi	r30, 0x32	; 50
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <M_DIO_Void_SetPinValue+0x130>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <M_DIO_Void_SetPinValue+0x12c>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	6f c0       	rjmp	.+222    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Port)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	2d 83       	std	Y+5, r18	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	91 05       	cpc	r25, r1
    106a:	51 f1       	breq	.+84     	; 0x10c0 <M_DIO_Void_SetPinValue+0x1a4>
    106c:	2d 81       	ldd	r18, Y+5	; 0x05
    106e:	3e 81       	ldd	r19, Y+6	; 0x06
    1070:	23 30       	cpi	r18, 0x03	; 3
    1072:	31 05       	cpc	r19, r1
    1074:	34 f4       	brge	.+12     	; 0x1082 <M_DIO_Void_SetPinValue+0x166>
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	91 05       	cpc	r25, r1
    107e:	61 f0       	breq	.+24     	; 0x1098 <M_DIO_Void_SetPinValue+0x17c>
    1080:	5a c0       	rjmp	.+180    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
    1082:	2d 81       	ldd	r18, Y+5	; 0x05
    1084:	3e 81       	ldd	r19, Y+6	; 0x06
    1086:	23 30       	cpi	r18, 0x03	; 3
    1088:	31 05       	cpc	r19, r1
    108a:	71 f1       	breq	.+92     	; 0x10e8 <M_DIO_Void_SetPinValue+0x1cc>
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	91 05       	cpc	r25, r1
    1094:	e9 f1       	breq	.+122    	; 0x1110 <M_DIO_Void_SetPinValue+0x1f4>
    1096:	4f c0       	rjmp	.+158    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <M_DIO_Void_SetPinValue+0x19a>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <M_DIO_Void_SetPinValue+0x196>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	3b c0       	rjmp	.+118    	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <M_DIO_Void_SetPinValue+0x1c2>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <M_DIO_Void_SetPinValue+0x1be>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	27 c0       	rjmp	.+78     	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    10e8:	a5 e3       	ldi	r26, 0x35	; 53
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e3       	ldi	r30, 0x35	; 53
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <M_DIO_Void_SetPinValue+0x1ea>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <M_DIO_Void_SetPinValue+0x1e6>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	13 c0       	rjmp	.+38     	; 0x1136 <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <M_DIO_Void_SetPinValue+0x212>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <M_DIO_Void_SetPinValue+0x20e>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1136:	2a 96       	adiw	r28, 0x0a	; 10
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <M_DIO_Void_TogPin+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <M_DIO_Void_TogPin+0x8>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	69 2f       	mov	r22, r25
    115e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    1162:	89 2f       	mov	r24, r25
    1164:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9a e0       	ldi	r25, 0x0A	; 10
    116a:	69 2f       	mov	r22, r25
    116c:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    1170:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Port)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3d 83       	std	Y+5, r19	; 0x05
    117a:	2c 83       	std	Y+4, r18	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	51 f1       	breq	.+84     	; 0x11da <M_DIO_Void_TogPin+0x92>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	23 30       	cpi	r18, 0x03	; 3
    118c:	31 05       	cpc	r19, r1
    118e:	34 f4       	brge	.+12     	; 0x119c <M_DIO_Void_TogPin+0x54>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	61 f0       	breq	.+24     	; 0x11b2 <M_DIO_Void_TogPin+0x6a>
    119a:	5a c0       	rjmp	.+180    	; 0x1250 <M_DIO_Void_TogPin+0x108>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	23 30       	cpi	r18, 0x03	; 3
    11a2:	31 05       	cpc	r19, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <M_DIO_Void_TogPin+0xba>
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	9d 81       	ldd	r25, Y+5	; 0x05
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	91 05       	cpc	r25, r1
    11ae:	e9 f1       	breq	.+122    	; 0x122a <M_DIO_Void_TogPin+0xe2>
    11b0:	4f c0       	rjmp	.+158    	; 0x1250 <M_DIO_Void_TogPin+0x108>
		{
		case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    11b2:	ab e3       	ldi	r26, 0x3B	; 59
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <M_DIO_Void_TogPin+0x88>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <M_DIO_Void_TogPin+0x84>
    11d4:	84 27       	eor	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	3b c0       	rjmp	.+118    	; 0x1250 <M_DIO_Void_TogPin+0x108>
		case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    11da:	a8 e3       	ldi	r26, 0x38	; 56
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e3       	ldi	r30, 0x38	; 56
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <M_DIO_Void_TogPin+0xb0>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <M_DIO_Void_TogPin+0xac>
    11fc:	84 27       	eor	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	27 c0       	rjmp	.+78     	; 0x1250 <M_DIO_Void_TogPin+0x108>
		case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <M_DIO_Void_TogPin+0xd8>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <M_DIO_Void_TogPin+0xd4>
    1224:	84 27       	eor	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <M_DIO_Void_TogPin+0x108>
		case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <M_DIO_Void_TogPin+0x100>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <M_DIO_Void_TogPin+0xfc>
    124c:	84 27       	eor	r24, r20
    124e:	8c 93       	st	X, r24
		default:                                                   break;
		}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <M_DIO_U8_GetPinValue>:
u8 M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <M_DIO_U8_GetPinValue+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <M_DIO_U8_GetPinValue+0x8>
    1268:	00 d0       	rcall	.+0      	; 0x126a <M_DIO_U8_GetPinValue+0xa>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9a e0       	ldi	r25, 0x0A	; 10
    1274:	69 2f       	mov	r22, r25
    1276:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    127a:	89 2f       	mov	r24, r25
    127c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Port = Copy_U8_Num /10;
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9a e0       	ldi	r25, 0x0A	; 10
    1282:	69 2f       	mov	r22, r25
    1284:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    1288:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    128a:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Port)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3e 83       	std	Y+6, r19	; 0x06
    1294:	2d 83       	std	Y+5, r18	; 0x05
    1296:	4d 81       	ldd	r20, Y+5	; 0x05
    1298:	5e 81       	ldd	r21, Y+6	; 0x06
    129a:	42 30       	cpi	r20, 0x02	; 2
    129c:	51 05       	cpc	r21, r1
    129e:	41 f1       	breq	.+80     	; 0x12f0 <M_DIO_U8_GetPinValue+0x90>
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	34 f4       	brge	.+12     	; 0x12b6 <M_DIO_U8_GetPinValue+0x56>
    12aa:	2d 81       	ldd	r18, Y+5	; 0x05
    12ac:	3e 81       	ldd	r19, Y+6	; 0x06
    12ae:	21 30       	cpi	r18, 0x01	; 1
    12b0:	31 05       	cpc	r19, r1
    12b2:	61 f0       	breq	.+24     	; 0x12cc <M_DIO_U8_GetPinValue+0x6c>
    12b4:	52 c0       	rjmp	.+164    	; 0x135a <M_DIO_U8_GetPinValue+0xfa>
    12b6:	4d 81       	ldd	r20, Y+5	; 0x05
    12b8:	5e 81       	ldd	r21, Y+6	; 0x06
    12ba:	43 30       	cpi	r20, 0x03	; 3
    12bc:	51 05       	cpc	r21, r1
    12be:	51 f1       	breq	.+84     	; 0x1314 <M_DIO_U8_GetPinValue+0xb4>
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	91 05       	cpc	r25, r1
    12c8:	b9 f1       	breq	.+110    	; 0x1338 <M_DIO_U8_GetPinValue+0xd8>
    12ca:	47 c0       	rjmp	.+142    	; 0x135a <M_DIO_U8_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    12cc:	e9 e3       	ldi	r30, 0x39	; 57
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <M_DIO_U8_GetPinValue+0x84>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <M_DIO_U8_GetPinValue+0x80>
    12e8:	ca 01       	movw	r24, r20
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	35 c0       	rjmp	.+106    	; 0x135a <M_DIO_U8_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    12f0:	e6 e3       	ldi	r30, 0x36	; 54
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <M_DIO_U8_GetPinValue+0xa8>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <M_DIO_U8_GetPinValue+0xa4>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	23 c0       	rjmp	.+70     	; 0x135a <M_DIO_U8_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    1314:	e3 e3       	ldi	r30, 0x33	; 51
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <M_DIO_U8_GetPinValue+0xcc>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <M_DIO_U8_GetPinValue+0xc8>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	11 c0       	rjmp	.+34     	; 0x135a <M_DIO_U8_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    1338:	e0 e3       	ldi	r30, 0x30	; 48
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <M_DIO_U8_GetPinValue+0xf0>
    134c:	55 95       	asr	r21
    134e:	47 95       	ror	r20
    1350:	8a 95       	dec	r24
    1352:	e2 f7       	brpl	.-8      	; 0x134c <M_DIO_U8_GetPinValue+0xec>
    1354:	ca 01       	movw	r24, r20
    1356:	81 70       	andi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
return Local_U8_Reading;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <M_DIO_Void_SetPinPullUpResistor>:

void M_DIO_Void_SetPinPullUpResistor(u8 Copy_U8_Num,u8 state)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	2a 97       	sbiw	r28, 0x0a	; 10
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9a e0       	ldi	r25, 0x0A	; 10
    138a:	69 2f       	mov	r22, r25
    138c:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    1390:	89 2f       	mov	r24, r25
    1392:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9a e0       	ldi	r25, 0x0A	; 10
    1398:	69 2f       	mov	r22, r25
    139a:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__udivmodqi4>
    139e:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3a 87       	std	Y+10, r19	; 0x0a
    13a8:	29 87       	std	Y+9, r18	; 0x09
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <M_DIO_Void_SetPinPullUpResistor+0x52>
    13b2:	29 85       	ldd	r18, Y+9	; 0x09
    13b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b6:	21 30       	cpi	r18, 0x01	; 1
    13b8:	31 05       	cpc	r19, r1
    13ba:	09 f4       	brne	.+2      	; 0x13be <M_DIO_Void_SetPinPullUpResistor+0x50>
    13bc:	76 c0       	rjmp	.+236    	; 0x14aa <M_DIO_Void_SetPinPullUpResistor+0x13c>
    13be:	e4 c0       	rjmp	.+456    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Port)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	38 87       	std	Y+8, r19	; 0x08
    13c8:	2f 83       	std	Y+7, r18	; 0x07
    13ca:	8f 81       	ldd	r24, Y+7	; 0x07
    13cc:	98 85       	ldd	r25, Y+8	; 0x08
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	61 f1       	breq	.+88     	; 0x142c <M_DIO_Void_SetPinPullUpResistor+0xbe>
    13d4:	2f 81       	ldd	r18, Y+7	; 0x07
    13d6:	38 85       	ldd	r19, Y+8	; 0x08
    13d8:	23 30       	cpi	r18, 0x03	; 3
    13da:	31 05       	cpc	r19, r1
    13dc:	34 f4       	brge	.+12     	; 0x13ea <M_DIO_Void_SetPinPullUpResistor+0x7c>
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	98 85       	ldd	r25, Y+8	; 0x08
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	69 f0       	breq	.+26     	; 0x1402 <M_DIO_Void_SetPinPullUpResistor+0x94>
    13e8:	cf c0       	rjmp	.+414    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
    13ea:	2f 81       	ldd	r18, Y+7	; 0x07
    13ec:	38 85       	ldd	r19, Y+8	; 0x08
    13ee:	23 30       	cpi	r18, 0x03	; 3
    13f0:	31 05       	cpc	r19, r1
    13f2:	89 f1       	breq	.+98     	; 0x1456 <M_DIO_Void_SetPinPullUpResistor+0xe8>
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <M_DIO_Void_SetPinPullUpResistor+0x92>
    13fe:	40 c0       	rjmp	.+128    	; 0x1480 <M_DIO_Void_SetPinPullUpResistor+0x112>
    1400:	c3 c0       	rjmp	.+390    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <M_DIO_Void_SetPinPullUpResistor+0xb2>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <M_DIO_Void_SetPinPullUpResistor+0xae>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	ae c0       	rjmp	.+348    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <M_DIO_Void_SetPinPullUpResistor+0xdc>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <M_DIO_Void_SetPinPullUpResistor+0xd8>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	99 c0       	rjmp	.+306    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <M_DIO_Void_SetPinPullUpResistor+0x106>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <M_DIO_Void_SetPinPullUpResistor+0x102>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	84 c0       	rjmp	.+264    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <M_DIO_Void_SetPinPullUpResistor+0x130>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <M_DIO_Void_SetPinPullUpResistor+0x12c>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	6f c0       	rjmp	.+222    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Port)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3e 83       	std	Y+6, r19	; 0x06
    14b2:	2d 83       	std	Y+5, r18	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	51 f1       	breq	.+84     	; 0x1512 <M_DIO_Void_SetPinPullUpResistor+0x1a4>
    14be:	2d 81       	ldd	r18, Y+5	; 0x05
    14c0:	3e 81       	ldd	r19, Y+6	; 0x06
    14c2:	23 30       	cpi	r18, 0x03	; 3
    14c4:	31 05       	cpc	r19, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <M_DIO_Void_SetPinPullUpResistor+0x166>
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	61 f0       	breq	.+24     	; 0x14ea <M_DIO_Void_SetPinPullUpResistor+0x17c>
    14d2:	5a c0       	rjmp	.+180    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
    14d4:	2d 81       	ldd	r18, Y+5	; 0x05
    14d6:	3e 81       	ldd	r19, Y+6	; 0x06
    14d8:	23 30       	cpi	r18, 0x03	; 3
    14da:	31 05       	cpc	r19, r1
    14dc:	71 f1       	breq	.+92     	; 0x153a <M_DIO_Void_SetPinPullUpResistor+0x1cc>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	91 05       	cpc	r25, r1
    14e6:	e9 f1       	breq	.+122    	; 0x1562 <M_DIO_Void_SetPinPullUpResistor+0x1f4>
    14e8:	4f c0       	rjmp	.+158    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    14ea:	ab e3       	ldi	r26, 0x3B	; 59
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <M_DIO_Void_SetPinPullUpResistor+0x19a>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <M_DIO_Void_SetPinPullUpResistor+0x196>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	3b c0       	rjmp	.+118    	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <M_DIO_Void_SetPinPullUpResistor+0x1c2>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <M_DIO_Void_SetPinPullUpResistor+0x1be>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	27 c0       	rjmp	.+78     	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    153a:	a5 e3       	ldi	r26, 0x35	; 53
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <M_DIO_Void_SetPinPullUpResistor+0x1ea>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <M_DIO_Void_SetPinPullUpResistor+0x1e6>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1562:	a2 e3       	ldi	r26, 0x32	; 50
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <M_DIO_Void_SetPinPullUpResistor+0x212>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <M_DIO_Void_SetPinPullUpResistor+0x20e>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1588:	2a 96       	adiw	r28, 0x0a	; 10
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <M_ADC_Void_ADCInit>:


void M_ADC_Void_ADCInit(void)
{
#if ADC_V_REF_MODE == AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX_REG,REFS0_BIT);
#elif ADC_V_REF_MODE == AREF_PIN
    15a2:	a7 e2       	ldi	r26, 0x27	; 39
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e7 e2       	ldi	r30, 0x27	; 39
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    15b0:	a7 e2       	ldi	r26, 0x27	; 39
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e2       	ldi	r30, 0x27	; 39
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif
	//to select right adjust
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
#if  ADC_PRESCALER_DV == 128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    15be:	a7 e2       	ldi	r26, 0x27	; 39
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e7 e2       	ldi	r30, 0x27	; 39
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 7d       	andi	r24, 0xDF	; 223
    15ca:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    15cc:	a6 e2       	ldi	r26, 0x26	; 38
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e6 e2       	ldi	r30, 0x26	; 38
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	8c 93       	st	X, r24
#elif  ADC_PRESCALER_DV == 64
    15da:	a6 e2       	ldi	r26, 0x26	; 38
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e6 e2       	ldi	r30, 0x26	; 38
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    15e8:	a6 e2       	ldi	r26, 0x26	; 38
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e6 e2       	ldi	r30, 0x26	; 38
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
	//to enable ADC circuit
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    15f6:	a6 e2       	ldi	r26, 0x26	; 38
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e6 e2       	ldi	r30, 0x26	; 38
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 62       	ori	r24, 0x20	; 32
    1602:	8c 93       	st	X, r24

}
    1604:	a6 e2       	ldi	r26, 0x26	; 38
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e6 e2       	ldi	r30, 0x26	; 38
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	8c 93       	st	X, r24
u16 M_ADC_U16_ADCRead(u8 Copy_U8_ADCChannel)
{
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <M_ADC_U16_ADCRead>:
	u32 Local_U32_Counter=0;
	switch(Copy_U8_ADCChannel)
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	27 97       	sbiw	r28, 0x07	; 7
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	8d 83       	std	Y+5, r24	; 0x05
	{
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	1a 82       	std	Y+2, r1	; 0x02
    1632:	1b 82       	std	Y+3, r1	; 0x03
    1634:	1c 82       	std	Y+4, r1	; 0x04
	case ADC_CHANNEL_0:
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3f 83       	std	Y+7, r19	; 0x07
    163e:	2e 83       	std	Y+6, r18	; 0x06
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <M_ADC_U16_ADCRead+0x34>
    164a:	9b c0       	rjmp	.+310    	; 0x1782 <M_ADC_U16_ADCRead+0x16a>
    164c:	2e 81       	ldd	r18, Y+6	; 0x06
    164e:	3f 81       	ldd	r19, Y+7	; 0x07
    1650:	24 30       	cpi	r18, 0x04	; 4
    1652:	31 05       	cpc	r19, r1
    1654:	8c f4       	brge	.+34     	; 0x1678 <M_ADC_U16_ADCRead+0x60>
    1656:	8e 81       	ldd	r24, Y+6	; 0x06
    1658:	9f 81       	ldd	r25, Y+7	; 0x07
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <M_ADC_U16_ADCRead+0x4a>
    1660:	48 c0       	rjmp	.+144    	; 0x16f2 <M_ADC_U16_ADCRead+0xda>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	0c f0       	brlt	.+2      	; 0x166e <M_ADC_U16_ADCRead+0x56>
    166c:	66 c0       	rjmp	.+204    	; 0x173a <M_ADC_U16_ADCRead+0x122>
    166e:	8e 81       	ldd	r24, Y+6	; 0x06
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	d1 f0       	breq	.+52     	; 0x16aa <M_ADC_U16_ADCRead+0x92>
    1676:	38 c1       	rjmp	.+624    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
    1678:	2e 81       	ldd	r18, Y+6	; 0x06
    167a:	3f 81       	ldd	r19, Y+7	; 0x07
    167c:	25 30       	cpi	r18, 0x05	; 5
    167e:	31 05       	cpc	r19, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <M_ADC_U16_ADCRead+0x6c>
    1682:	c7 c0       	rjmp	.+398    	; 0x1812 <M_ADC_U16_ADCRead+0x1fa>
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	91 05       	cpc	r25, r1
    168c:	0c f4       	brge	.+2      	; 0x1690 <M_ADC_U16_ADCRead+0x78>
    168e:	9d c0       	rjmp	.+314    	; 0x17ca <M_ADC_U16_ADCRead+0x1b2>
    1690:	2e 81       	ldd	r18, Y+6	; 0x06
    1692:	3f 81       	ldd	r19, Y+7	; 0x07
    1694:	26 30       	cpi	r18, 0x06	; 6
    1696:	31 05       	cpc	r19, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <M_ADC_U16_ADCRead+0x84>
    169a:	df c0       	rjmp	.+446    	; 0x185a <M_ADC_U16_ADCRead+0x242>
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	87 30       	cpi	r24, 0x07	; 7
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <M_ADC_U16_ADCRead+0x90>
    16a6:	fd c0       	rjmp	.+506    	; 0x18a2 <M_ADC_U16_ADCRead+0x28a>
    16a8:	1f c1       	rjmp	.+574    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    16aa:	a7 e2       	ldi	r26, 0x27	; 39
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e7 e2       	ldi	r30, 0x27	; 39
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7e       	andi	r24, 0xEF	; 239
    16b6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    16b8:	a7 e2       	ldi	r26, 0x27	; 39
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e7 e2       	ldi	r30, 0x27	; 39
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	87 7f       	andi	r24, 0xF7	; 247
    16c4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    16c6:	a7 e2       	ldi	r26, 0x27	; 39
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e7 e2       	ldi	r30, 0x27	; 39
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8b 7f       	andi	r24, 0xFB	; 251
    16d2:	8c 93       	st	X, r24
		break;
    16d4:	a7 e2       	ldi	r26, 0x27	; 39
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e7 e2       	ldi	r30, 0x27	; 39
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8d 7f       	andi	r24, 0xFD	; 253
    16e0:	8c 93       	st	X, r24
	case ADC_CHANNEL_1:
    16e2:	a7 e2       	ldi	r26, 0x27	; 39
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e2       	ldi	r30, 0x27	; 39
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8e 7f       	andi	r24, 0xFE	; 254
    16ee:	8c 93       	st	X, r24
    16f0:	fb c0       	rjmp	.+502    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    16f2:	a7 e2       	ldi	r26, 0x27	; 39
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e7 e2       	ldi	r30, 0x27	; 39
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    1700:	a7 e2       	ldi	r26, 0x27	; 39
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e7 e2       	ldi	r30, 0x27	; 39
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    170e:	a7 e2       	ldi	r26, 0x27	; 39
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e7 e2       	ldi	r30, 0x27	; 39
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8b 7f       	andi	r24, 0xFB	; 251
    171a:	8c 93       	st	X, r24
		break;
    171c:	a7 e2       	ldi	r26, 0x27	; 39
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e7 e2       	ldi	r30, 0x27	; 39
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8d 7f       	andi	r24, 0xFD	; 253
    1728:	8c 93       	st	X, r24
	case ADC_CHANNEL_2:
    172a:	a7 e2       	ldi	r26, 0x27	; 39
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e2       	ldi	r30, 0x27	; 39
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	81 60       	ori	r24, 0x01	; 1
    1736:	8c 93       	st	X, r24
    1738:	d7 c0       	rjmp	.+430    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    173a:	a7 e2       	ldi	r26, 0x27	; 39
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e7 e2       	ldi	r30, 0x27	; 39
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 7e       	andi	r24, 0xEF	; 239
    1746:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1748:	a7 e2       	ldi	r26, 0x27	; 39
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e7 e2       	ldi	r30, 0x27	; 39
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    1756:	a7 e2       	ldi	r26, 0x27	; 39
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e7 e2       	ldi	r30, 0x27	; 39
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8b 7f       	andi	r24, 0xFB	; 251
    1762:	8c 93       	st	X, r24
		break;
    1764:	a7 e2       	ldi	r26, 0x27	; 39
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e7 e2       	ldi	r30, 0x27	; 39
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	8c 93       	st	X, r24
	case ADC_CHANNEL_3:
    1772:	a7 e2       	ldi	r26, 0x27	; 39
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e7 e2       	ldi	r30, 0x27	; 39
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8e 7f       	andi	r24, 0xFE	; 254
    177e:	8c 93       	st	X, r24
    1780:	b3 c0       	rjmp	.+358    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1782:	a7 e2       	ldi	r26, 0x27	; 39
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 e2       	ldi	r30, 0x27	; 39
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8f 7e       	andi	r24, 0xEF	; 239
    178e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1790:	a7 e2       	ldi	r26, 0x27	; 39
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e7 e2       	ldi	r30, 0x27	; 39
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	87 7f       	andi	r24, 0xF7	; 247
    179c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    179e:	a7 e2       	ldi	r26, 0x27	; 39
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e7 e2       	ldi	r30, 0x27	; 39
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	8c 93       	st	X, r24
		break;
    17ac:	a7 e2       	ldi	r26, 0x27	; 39
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e2       	ldi	r30, 0x27	; 39
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	8c 93       	st	X, r24
	case ADC_CHANNEL_4:
    17ba:	a7 e2       	ldi	r26, 0x27	; 39
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e7 e2       	ldi	r30, 0x27	; 39
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	8c 93       	st	X, r24
    17c8:	8f c0       	rjmp	.+286    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		SET_BIT(ADMUX_REG,MUX2_BIT);
    17ca:	a7 e2       	ldi	r26, 0x27	; 39
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e7 e2       	ldi	r30, 0x27	; 39
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7e       	andi	r24, 0xEF	; 239
    17d6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    17d8:	a7 e2       	ldi	r26, 0x27	; 39
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e7 e2       	ldi	r30, 0x27	; 39
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	87 7f       	andi	r24, 0xF7	; 247
    17e4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    17e6:	a7 e2       	ldi	r26, 0x27	; 39
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e7 e2       	ldi	r30, 0x27	; 39
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	8c 93       	st	X, r24
		break;
    17f4:	a7 e2       	ldi	r26, 0x27	; 39
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e7 e2       	ldi	r30, 0x27	; 39
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8d 7f       	andi	r24, 0xFD	; 253
    1800:	8c 93       	st	X, r24
	case ADC_CHANNEL_5:
    1802:	a7 e2       	ldi	r26, 0x27	; 39
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e2       	ldi	r30, 0x27	; 39
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8e 7f       	andi	r24, 0xFE	; 254
    180e:	8c 93       	st	X, r24
    1810:	6b c0       	rjmp	.+214    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		SET_BIT(ADMUX_REG,MUX2_BIT);
    1812:	a7 e2       	ldi	r26, 0x27	; 39
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e7 e2       	ldi	r30, 0x27	; 39
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 7e       	andi	r24, 0xEF	; 239
    181e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    1820:	a7 e2       	ldi	r26, 0x27	; 39
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e2       	ldi	r30, 0x27	; 39
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	87 7f       	andi	r24, 0xF7	; 247
    182c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    182e:	a7 e2       	ldi	r26, 0x27	; 39
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e7 e2       	ldi	r30, 0x27	; 39
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	8c 93       	st	X, r24
		break;
    183c:	a7 e2       	ldi	r26, 0x27	; 39
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e7 e2       	ldi	r30, 0x27	; 39
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8d 7f       	andi	r24, 0xFD	; 253
    1848:	8c 93       	st	X, r24
	case ADC_CHANNEL_6:
    184a:	a7 e2       	ldi	r26, 0x27	; 39
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e7 e2       	ldi	r30, 0x27	; 39
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	8c 93       	st	X, r24
    1858:	47 c0       	rjmp	.+142    	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		SET_BIT(ADMUX_REG,MUX2_BIT);
    185a:	a7 e2       	ldi	r26, 0x27	; 39
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e7 e2       	ldi	r30, 0x27	; 39
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7e       	andi	r24, 0xEF	; 239
    1866:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1868:	a7 e2       	ldi	r26, 0x27	; 39
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e7 e2       	ldi	r30, 0x27	; 39
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	87 7f       	andi	r24, 0xF7	; 247
    1874:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    1876:	a7 e2       	ldi	r26, 0x27	; 39
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e7 e2       	ldi	r30, 0x27	; 39
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	8c 93       	st	X, r24
		break;
    1884:	a7 e2       	ldi	r26, 0x27	; 39
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e2       	ldi	r30, 0x27	; 39
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	82 60       	ori	r24, 0x02	; 2
    1890:	8c 93       	st	X, r24
	case ADC_CHANNEL_7:
    1892:	a7 e2       	ldi	r26, 0x27	; 39
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e7 e2       	ldi	r30, 0x27	; 39
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8e 7f       	andi	r24, 0xFE	; 254
    189e:	8c 93       	st	X, r24
    18a0:	23 c0       	rjmp	.+70     	; 0x18e8 <M_ADC_U16_ADCRead+0x2d0>
		CLR_BIT(ADMUX_REG,MUX4_BIT);
		CLR_BIT(ADMUX_REG,MUX3_BIT);
		SET_BIT(ADMUX_REG,MUX2_BIT);
    18a2:	a7 e2       	ldi	r26, 0x27	; 39
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e2       	ldi	r30, 0x27	; 39
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 7e       	andi	r24, 0xEF	; 239
    18ae:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    18b0:	a7 e2       	ldi	r26, 0x27	; 39
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e7 e2       	ldi	r30, 0x27	; 39
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	87 7f       	andi	r24, 0xF7	; 247
    18bc:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    18be:	a7 e2       	ldi	r26, 0x27	; 39
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e7 e2       	ldi	r30, 0x27	; 39
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	84 60       	ori	r24, 0x04	; 4
    18ca:	8c 93       	st	X, r24
		break;
    18cc:	a7 e2       	ldi	r26, 0x27	; 39
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e7 e2       	ldi	r30, 0x27	; 39
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	82 60       	ori	r24, 0x02	; 2
    18d8:	8c 93       	st	X, r24
	default:      break;
    18da:	a7 e2       	ldi	r26, 0x27	; 39
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e7 e2       	ldi	r30, 0x27	; 39
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	81 60       	ori	r24, 0x01	; 1
    18e6:	8c 93       	st	X, r24
	}

	//TO START CONVERSION
	SET_BIT(ADCSRA_REG,ADSC_BIT);
	while(Local_U32_Counter < POLLING_TIME)
		{
    18e8:	a6 e2       	ldi	r26, 0x26	; 38
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e6 e2       	ldi	r30, 0x26	; 38
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	8c 93       	st	X, r24
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <M_ADC_U16_ADCRead+0x30c>
			Local_U32_Counter++;
			if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
			{
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	ab 81       	ldd	r26, Y+3	; 0x03
    18fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	a1 1d       	adc	r26, r1
    1904:	b1 1d       	adc	r27, r1
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	ab 83       	std	Y+3, r26	; 0x03
    190c:	bc 83       	std	Y+4, r27	; 0x04
				break;
    190e:	e6 e2       	ldi	r30, 0x26	; 38
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	82 95       	swap	r24
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 23       	and	r24, r24
    1922:	61 f4       	brne	.+24     	; 0x193c <M_ADC_U16_ADCRead+0x324>

	//TO START CONVERSION
	SET_BIT(ADCSRA_REG,ADSC_BIT);
	while(Local_U32_Counter < POLLING_TIME)
		{
			Local_U32_Counter++;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	ab 81       	ldd	r26, Y+3	; 0x03
    192a:	bc 81       	ldd	r27, Y+4	; 0x04
    192c:	80 30       	cpi	r24, 0x00	; 0
    192e:	2d e2       	ldi	r18, 0x2D	; 45
    1930:	92 07       	cpc	r25, r18
    1932:	21 e3       	ldi	r18, 0x31	; 49
    1934:	a2 07       	cpc	r26, r18
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	b2 07       	cpc	r27, r18
    193a:	f0 f2       	brcs	.-68     	; 0x18f8 <M_ADC_U16_ADCRead+0x2e0>
				break;
			}
		}
		return ADCL_REG;
}
    193c:	e4 e2       	ldi	r30, 0x24	; 36
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	27 96       	adiw	r28, 0x07	; 7
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <H_LCD_Void_LCDInit>:

#include "LCD_Interface.h"
#include "LCD_Private.h"

void H_LCD_Void_LCDInit(void)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    195e:	88 e1       	ldi	r24, 0x18	; 24
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1966:	89 e1       	ldi	r24, 0x19	; 25
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    196e:	8a e1       	ldi	r24, 0x1A	; 26
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1976:	8b e1       	ldi	r24, 0x1B	; 27
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    197e:	85 e1       	ldi	r24, 0x15	; 21
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1986:	87 e1       	ldi	r24, 0x17	; 23
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    198e:	86 e1       	ldi	r24, 0x16	; 22
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    1996:	86 e1       	ldi	r24, 0x16	; 22
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    199e:	83 e3       	ldi	r24, 0x33	; 51
    19a0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    19a4:	82 e3       	ldi	r24, 0x32	; 50
    19a6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    19aa:	88 e2       	ldi	r24, 0x28	; 40
    19ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    19b0:	8c e0       	ldi	r24, 0x0C	; 12
    19b2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
#endif
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <H_LCD_Void_LCDWriteCharacter>:

void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	e9 97       	sbiw	r28, 0x39	; 57
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    19de:	85 e1       	ldi	r24, 0x15	; 21
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    19e6:	89 ad       	ldd	r24, Y+57	; 0x39
    19e8:	82 95       	swap	r24
    19ea:	8f 70       	andi	r24, 0x0F	; 15
    19ec:	0e 94 8f 12 	call	0x251e	; 0x251e <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    19f0:	87 e1       	ldi	r24, 0x17	; 23
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e8       	ldi	r26, 0x80	; 128
    19fe:	bf e3       	ldi	r27, 0x3F	; 63
    1a00:	8d ab       	std	Y+53, r24	; 0x35
    1a02:	9e ab       	std	Y+54, r25	; 0x36
    1a04:	af ab       	std	Y+55, r26	; 0x37
    1a06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a e7       	ldi	r20, 0x7A	; 122
    1a16:	55 e4       	ldi	r21, 0x45	; 69
    1a18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	89 ab       	std	Y+49, r24	; 0x31
    1a22:	9a ab       	std	Y+50, r25	; 0x32
    1a24:	ab ab       	std	Y+51, r26	; 0x33
    1a26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a28:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <H_LCD_Void_LCDWriteCharacter+0x82>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	98 ab       	std	Y+48, r25	; 0x30
    1a46:	8f a7       	std	Y+47, r24	; 0x2f
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <H_LCD_Void_LCDWriteCharacter+0x100>
	else if (__tmp > 65535)
    1a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a50:	9c a9       	ldd	r25, Y+52	; 0x34
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <H_LCD_Void_LCDWriteCharacter+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6d a9       	ldd	r22, Y+53	; 0x35
    1a64:	7e a9       	ldd	r23, Y+54	; 0x36
    1a66:	8f a9       	ldd	r24, Y+55	; 0x37
    1a68:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	98 ab       	std	Y+48, r25	; 0x30
    1a88:	8f a7       	std	Y+47, r24	; 0x2f
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <H_LCD_Void_LCDWriteCharacter+0xe2>
    1a8c:	80 e9       	ldi	r24, 0x90	; 144
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	9e a7       	std	Y+46, r25	; 0x2e
    1a92:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <H_LCD_Void_LCDWriteCharacter+0xd0>
    1a9c:	9e a7       	std	Y+46, r25	; 0x2e
    1a9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	98 ab       	std	Y+48, r25	; 0x30
    1aa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aac:	98 a9       	ldd	r25, Y+48	; 0x30
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <H_LCD_Void_LCDWriteCharacter+0xc4>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <H_LCD_Void_LCDWriteCharacter+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aba:	9c a9       	ldd	r25, Y+52	; 0x34
    1abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	9c a7       	std	Y+44, r25	; 0x2c
    1ace:	8b a7       	std	Y+43, r24	; 0x2b
    1ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <H_LCD_Void_LCDWriteCharacter+0x10c>
    1ad8:	9c a7       	std	Y+44, r25	; 0x2c
    1ada:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1adc:	87 e1       	ldi	r24, 0x17	; 23
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	8f a3       	std	Y+39, r24	; 0x27
    1aee:	98 a7       	std	Y+40, r25	; 0x28
    1af0:	a9 a7       	std	Y+41, r26	; 0x29
    1af2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6f a1       	ldd	r22, Y+39	; 0x27
    1af6:	78 a5       	ldd	r23, Y+40	; 0x28
    1af8:	89 a5       	ldd	r24, Y+41	; 0x29
    1afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a e7       	ldi	r20, 0x7A	; 122
    1b02:	55 e4       	ldi	r21, 0x45	; 69
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8b a3       	std	Y+35, r24	; 0x23
    1b0e:	9c a3       	std	Y+36, r25	; 0x24
    1b10:	ad a3       	std	Y+37, r26	; 0x25
    1b12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <H_LCD_Void_LCDWriteCharacter+0x16e>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9a a3       	std	Y+34, r25	; 0x22
    1b32:	89 a3       	std	Y+33, r24	; 0x21
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <H_LCD_Void_LCDWriteCharacter+0x1ec>
	else if (__tmp > 65535)
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <H_LCD_Void_LCDWriteCharacter+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b50:	78 a5       	ldd	r23, Y+40	; 0x28
    1b52:	89 a5       	ldd	r24, Y+41	; 0x29
    1b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9a a3       	std	Y+34, r25	; 0x22
    1b74:	89 a3       	std	Y+33, r24	; 0x21
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <H_LCD_Void_LCDWriteCharacter+0x1ce>
    1b78:	80 e9       	ldi	r24, 0x90	; 144
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	98 a3       	std	Y+32, r25	; 0x20
    1b7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b82:	98 a1       	ldd	r25, Y+32	; 0x20
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <H_LCD_Void_LCDWriteCharacter+0x1bc>
    1b88:	98 a3       	std	Y+32, r25	; 0x20
    1b8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9a a3       	std	Y+34, r25	; 0x22
    1b94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	89 a1       	ldd	r24, Y+33	; 0x21
    1b98:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <H_LCD_Void_LCDWriteCharacter+0x1b0>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <H_LCD_Void_LCDWriteCharacter+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
    1bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <H_LCD_Void_LCDWriteCharacter+0x1f8>
    1bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    1bc8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bca:	0e 94 8f 12 	call	0x251e	; 0x251e <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1bce:	87 e1       	ldi	r24, 0x17	; 23
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	89 8f       	std	Y+25, r24	; 0x19
    1be0:	9a 8f       	std	Y+26, r25	; 0x1a
    1be2:	ab 8f       	std	Y+27, r26	; 0x1b
    1be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8d 8b       	std	Y+21, r24	; 0x15
    1c00:	9e 8b       	std	Y+22, r25	; 0x16
    1c02:	af 8b       	std	Y+23, r26	; 0x17
    1c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <H_LCD_Void_LCDWriteCharacter+0x260>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <H_LCD_Void_LCDWriteCharacter+0x2de>
	else if (__tmp > 65535)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <H_LCD_Void_LCDWriteCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <H_LCD_Void_LCDWriteCharacter+0x2c0>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
    1c72:	89 89       	ldd	r24, Y+17	; 0x11
    1c74:	9a 89       	ldd	r25, Y+18	; 0x12
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <H_LCD_Void_LCDWriteCharacter+0x2ae>
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <H_LCD_Void_LCDWriteCharacter+0x2a2>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <H_LCD_Void_LCDWriteCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	98 89       	ldd	r25, Y+16	; 0x10
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <H_LCD_Void_LCDWriteCharacter+0x2ea>
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1cba:	87 e1       	ldi	r24, 0x17	; 23
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	55 e4       	ldi	r21, 0x45	; 69
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <H_LCD_Void_LCDWriteCharacter+0x34c>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <H_LCD_Void_LCDWriteCharacter+0x3ca>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <H_LCD_Void_LCDWriteCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <H_LCD_Void_LCDWriteCharacter+0x3ac>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <H_LCD_Void_LCDWriteCharacter+0x39a>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <H_LCD_Void_LCDWriteCharacter+0x38e>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <H_LCD_Void_LCDWriteCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <H_LCD_Void_LCDWriteCharacter+0x3d6>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(1);
}
    1da6:	e9 96       	adiw	r28, 0x39	; 57
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	e9 97       	sbiw	r28, 0x39	; 57
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1dce:	85 e1       	ldi	r24, 0x15	; 21
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    1dd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd8:	82 95       	swap	r24
    1dda:	8f 70       	andi	r24, 0x0F	; 15
    1ddc:	0e 94 8f 12 	call	0x251e	; 0x251e <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1de0:	87 e1       	ldi	r24, 0x17	; 23
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e8       	ldi	r26, 0x80	; 128
    1dee:	bf e3       	ldi	r27, 0x3F	; 63
    1df0:	8d ab       	std	Y+53, r24	; 0x35
    1df2:	9e ab       	std	Y+54, r25	; 0x36
    1df4:	af ab       	std	Y+55, r26	; 0x37
    1df6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	55 e4       	ldi	r21, 0x45	; 69
    1e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	89 ab       	std	Y+49, r24	; 0x31
    1e12:	9a ab       	std	Y+50, r25	; 0x32
    1e14:	ab ab       	std	Y+51, r26	; 0x33
    1e16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <H_LCD_Void_LCDWriteCommand+0x82>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	98 ab       	std	Y+48, r25	; 0x30
    1e36:	8f a7       	std	Y+47, r24	; 0x2f
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <H_LCD_Void_LCDWriteCommand+0x100>
	else if (__tmp > 65535)
    1e3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e40:	9c a9       	ldd	r25, Y+52	; 0x34
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <H_LCD_Void_LCDWriteCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6d a9       	ldd	r22, Y+53	; 0x35
    1e54:	7e a9       	ldd	r23, Y+54	; 0x36
    1e56:	8f a9       	ldd	r24, Y+55	; 0x37
    1e58:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	98 ab       	std	Y+48, r25	; 0x30
    1e78:	8f a7       	std	Y+47, r24	; 0x2f
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <H_LCD_Void_LCDWriteCommand+0xe2>
    1e7c:	80 e9       	ldi	r24, 0x90	; 144
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	9e a7       	std	Y+46, r25	; 0x2e
    1e82:	8d a7       	std	Y+45, r24	; 0x2d
    1e84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <H_LCD_Void_LCDWriteCommand+0xd0>
    1e8c:	9e a7       	std	Y+46, r25	; 0x2e
    1e8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e92:	98 a9       	ldd	r25, Y+48	; 0x30
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	98 ab       	std	Y+48, r25	; 0x30
    1e98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <H_LCD_Void_LCDWriteCommand+0xc4>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <H_LCD_Void_LCDWriteCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eaa:	9c a9       	ldd	r25, Y+52	; 0x34
    1eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	98 ab       	std	Y+48, r25	; 0x30
    1eb6:	8f a7       	std	Y+47, r24	; 0x2f
    1eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eba:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebc:	9c a7       	std	Y+44, r25	; 0x2c
    1ebe:	8b a7       	std	Y+43, r24	; 0x2b
    1ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <H_LCD_Void_LCDWriteCommand+0x10c>
    1ec8:	9c a7       	std	Y+44, r25	; 0x2c
    1eca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1ecc:	87 e1       	ldi	r24, 0x17	; 23
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	8f a3       	std	Y+39, r24	; 0x27
    1ede:	98 a7       	std	Y+40, r25	; 0x28
    1ee0:	a9 a7       	std	Y+41, r26	; 0x29
    1ee2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    1eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a e7       	ldi	r20, 0x7A	; 122
    1ef2:	55 e4       	ldi	r21, 0x45	; 69
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8b a3       	std	Y+35, r24	; 0x23
    1efe:	9c a3       	std	Y+36, r25	; 0x24
    1f00:	ad a3       	std	Y+37, r26	; 0x25
    1f02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f04:	6b a1       	ldd	r22, Y+35	; 0x23
    1f06:	7c a1       	ldd	r23, Y+36	; 0x24
    1f08:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <H_LCD_Void_LCDWriteCommand+0x16e>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9a a3       	std	Y+34, r25	; 0x22
    1f22:	89 a3       	std	Y+33, r24	; 0x21
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <H_LCD_Void_LCDWriteCommand+0x1ec>
	else if (__tmp > 65535)
    1f26:	6b a1       	ldd	r22, Y+35	; 0x23
    1f28:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <H_LCD_Void_LCDWriteCommand+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f40:	78 a5       	ldd	r23, Y+40	; 0x28
    1f42:	89 a5       	ldd	r24, Y+41	; 0x29
    1f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9a a3       	std	Y+34, r25	; 0x22
    1f64:	89 a3       	std	Y+33, r24	; 0x21
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <H_LCD_Void_LCDWriteCommand+0x1ce>
    1f68:	80 e9       	ldi	r24, 0x90	; 144
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	98 a3       	std	Y+32, r25	; 0x20
    1f6e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f72:	98 a1       	ldd	r25, Y+32	; 0x20
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <H_LCD_Void_LCDWriteCommand+0x1bc>
    1f78:	98 a3       	std	Y+32, r25	; 0x20
    1f7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9a a3       	std	Y+34, r25	; 0x22
    1f84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	89 a1       	ldd	r24, Y+33	; 0x21
    1f88:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <H_LCD_Void_LCDWriteCommand+0x1b0>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <H_LCD_Void_LCDWriteCommand+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6b a1       	ldd	r22, Y+35	; 0x23
    1f92:	7c a1       	ldd	r23, Y+36	; 0x24
    1f94:	8d a1       	ldd	r24, Y+37	; 0x25
    1f96:	9e a1       	ldd	r25, Y+38	; 0x26
    1f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9a a3       	std	Y+34, r25	; 0x22
    1fa2:	89 a3       	std	Y+33, r24	; 0x21
    1fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    1faa:	8d 8f       	std	Y+29, r24	; 0x1d
    1fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <H_LCD_Void_LCDWriteCommand+0x1f8>
    1fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    1fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1fba:	0e 94 8f 12 	call	0x251e	; 0x251e <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1fbe:	87 e1       	ldi	r24, 0x17	; 23
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e8       	ldi	r26, 0x80	; 128
    1fcc:	bf e3       	ldi	r27, 0x3F	; 63
    1fce:	89 8f       	std	Y+25, r24	; 0x19
    1fd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	55 e4       	ldi	r21, 0x45	; 69
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8d 8b       	std	Y+21, r24	; 0x15
    1ff0:	9e 8b       	std	Y+22, r25	; 0x16
    1ff2:	af 8b       	std	Y+23, r26	; 0x17
    1ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <H_LCD_Void_LCDWriteCommand+0x260>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <H_LCD_Void_LCDWriteCommand+0x2de>
	else if (__tmp > 65535)
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <H_LCD_Void_LCDWriteCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <H_LCD_Void_LCDWriteCommand+0x2c0>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
    2062:	89 89       	ldd	r24, Y+17	; 0x11
    2064:	9a 89       	ldd	r25, Y+18	; 0x12
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <H_LCD_Void_LCDWriteCommand+0x2ae>
    206a:	9a 8b       	std	Y+18, r25	; 0x12
    206c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <H_LCD_Void_LCDWriteCommand+0x2a2>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <H_LCD_Void_LCDWriteCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <H_LCD_Void_LCDWriteCommand+0x2ea>
    20a6:	98 8b       	std	Y+16, r25	; 0x10
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    20aa:	87 e1       	ldi	r24, 0x17	; 23
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e8       	ldi	r26, 0x80	; 128
    20b8:	bf e3       	ldi	r27, 0x3F	; 63
    20ba:	8b 87       	std	Y+11, r24	; 0x0b
    20bc:	9c 87       	std	Y+12, r25	; 0x0c
    20be:	ad 87       	std	Y+13, r26	; 0x0d
    20c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a e7       	ldi	r20, 0x7A	; 122
    20d0:	55 e4       	ldi	r21, 0x45	; 69
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8f 83       	std	Y+7, r24	; 0x07
    20dc:	98 87       	std	Y+8, r25	; 0x08
    20de:	a9 87       	std	Y+9, r26	; 0x09
    20e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <H_LCD_Void_LCDWriteCommand+0x34c>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	3f c0       	rjmp	.+126    	; 0x2182 <H_LCD_Void_LCDWriteCommand+0x3ca>
	else if (__tmp > 65535)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	4c f5       	brge	.+82     	; 0x216e <H_LCD_Void_LCDWriteCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	6b 85       	ldd	r22, Y+11	; 0x0b
    211e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2120:	8d 85       	ldd	r24, Y+13	; 0x0d
    2122:	9e 85       	ldd	r25, Y+14	; 0x0e
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <H_LCD_Void_LCDWriteCommand+0x3ac>
    2146:	80 e9       	ldi	r24, 0x90	; 144
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <H_LCD_Void_LCDWriteCommand+0x39a>
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f7       	brne	.-38     	; 0x2146 <H_LCD_Void_LCDWriteCommand+0x38e>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <H_LCD_Void_LCDWriteCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <H_LCD_Void_LCDWriteCommand+0x3d6>
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(1);
}
    2196:	e9 96       	adiw	r28, 0x39	; 57
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <H_LCD_Void_LCDWriteString>:
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <H_LCD_Void_LCDWriteString+0x6>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    21b8:	19 82       	std	Y+1, r1	; 0x01
    21ba:	0e c0       	rjmp	.+28     	; 0x21d8 <H_LCD_Void_LCDWriteString+0x30>
	while(Copy_U8_P[Local_U8_Counter] != '\0')
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	fc 01       	movw	r30, r24
    21c8:	e2 0f       	add	r30, r18
    21ca:	f3 1f       	adc	r31, r19
    21cc:	80 81       	ld	r24, Z
    21ce:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	e2 0f       	add	r30, r18
    21e6:	f3 1f       	adc	r31, r19
    21e8:	80 81       	ld	r24, Z
    21ea:	88 23       	and	r24, r24
    21ec:	39 f7       	brne	.-50     	; 0x21bc <H_LCD_Void_LCDWriteString+0x14>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(f32 Copy_F32_Num)
{
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	6d 97       	sbiw	r28, 0x1d	; 29
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	6a 8f       	std	Y+26, r22	; 0x1a
    2214:	7b 8f       	std	Y+27, r23	; 0x1b
    2216:	8c 8f       	std	Y+28, r24	; 0x1c
    2218:	9d 8f       	std	Y+29, r25	; 0x1d
	s8 Local_S8_Counter = -1;
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_U8_Arr[16];
	if((int)Copy_F32_Num < 0)
    221e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2220:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2222:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2224:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2226:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	99 23       	and	r25, r25
    2230:	64 f4       	brge	.+24     	; 0x224a <H_LCD_Void_LCDWriteNumber+0x50>
		{
			Copy_F32_Num = Copy_F32_Num * -1;
    2232:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2234:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2236:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2238:	bd 8d       	ldd	r27, Y+29	; 0x1d
    223a:	b0 58       	subi	r27, 0x80	; 128
    223c:	8a 8f       	std	Y+26, r24	; 0x1a
    223e:	9b 8f       	std	Y+27, r25	; 0x1b
    2240:	ac 8f       	std	Y+28, r26	; 0x1c
    2242:	bd 8f       	std	Y+29, r27	; 0x1d
			H_LCD_Void_LCDWriteCharacter('-');
    2244:	8d e2       	ldi	r24, 0x2D	; 45
    2246:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <H_LCD_Void_LCDWriteCharacter>
		}
	f32 Local_F32_FloatNum=Copy_F32_Num -((s32)Copy_F32_Num);
    224a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    224c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    224e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2250:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2252:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    2262:	9b 01       	movw	r18, r22
    2264:	ac 01       	movw	r20, r24
    2266:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2268:	7b 8d       	ldd	r23, Y+27	; 0x1b
    226a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    226c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    226e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	af 83       	std	Y+7, r26	; 0x07
    227c:	b8 87       	std	Y+8, r27	; 0x08
	do
	{
		Local_S8_Counter++;
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	89 87       	std	Y+9, r24	; 0x09
		Local_U8_Arr[Local_S8_Counter]  =  (s32)Copy_F32_Num % 10;
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	08 2f       	mov	r16, r24
    2288:	11 27       	eor	r17, r17
    228a:	07 fd       	sbrc	r16, 7
    228c:	10 95       	com	r17
    228e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2290:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2292:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2294:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2296:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	2a e0       	ldi	r18, 0x0A	; 10
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__divmodsi4>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	28 2f       	mov	r18, r24
    22b4:	ce 01       	movw	r24, r28
    22b6:	0a 96       	adiw	r24, 0x0a	; 10
    22b8:	fc 01       	movw	r30, r24
    22ba:	e0 0f       	add	r30, r16
    22bc:	f1 1f       	adc	r31, r17
    22be:	20 83       	st	Z, r18
		Copy_F32_Num = (int)Copy_F32_Num / 10;
    22c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22c2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22c8:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	b9 01       	movw	r22, r18
    22d6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__divmodhi4>
    22da:	cb 01       	movw	r24, r22
    22dc:	aa 27       	eor	r26, r26
    22de:	97 fd       	sbrc	r25, 7
    22e0:	a0 95       	com	r26
    22e2:	ba 2f       	mov	r27, r26
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8a 8f       	std	Y+26, r24	; 0x1a
    22f2:	9b 8f       	std	Y+27, r25	; 0x1b
    22f4:	ac 8f       	std	Y+28, r26	; 0x1c
    22f6:	bd 8f       	std	Y+29, r27	; 0x1d
	}while((int)Copy_F32_Num != 0);
    22f8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22fa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2300:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	09 f0       	breq	.+2      	; 0x230e <H_LCD_Void_LCDWriteNumber+0x114>
    230c:	b8 cf       	rjmp	.-144    	; 0x227e <H_LCD_Void_LCDWriteNumber+0x84>
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <H_LCD_Void_LCDWriteNumber+0x138>
	while(Local_S8_Counter >= 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	28 2f       	mov	r18, r24
    2314:	33 27       	eor	r19, r19
    2316:	27 fd       	sbrc	r18, 7
    2318:	30 95       	com	r19
    231a:	ce 01       	movw	r24, r28
    231c:	0a 96       	adiw	r24, 0x0a	; 10
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	80 81       	ld	r24, Z
    2326:	80 5d       	subi	r24, 0xD0	; 208
    2328:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	89 87       	std	Y+9, r24	; 0x09
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  (s32)Copy_F32_Num % 10;
		Copy_F32_Num = (int)Copy_F32_Num / 10;
	}while((int)Copy_F32_Num != 0);
	while(Local_S8_Counter >= 0)
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	88 23       	and	r24, r24
    2336:	64 f7       	brge	.-40     	; 0x2310 <H_LCD_Void_LCDWriteNumber+0x116>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
		Local_S8_Counter--;
	}
	if(Local_F32_FloatNum!=0)
    2338:	6d 81       	ldd	r22, Y+5	; 0x05
    233a:	7e 81       	ldd	r23, Y+6	; 0x06
    233c:	8f 81       	ldd	r24, Y+7	; 0x07
    233e:	98 85       	ldd	r25, Y+8	; 0x08
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	0e 94 11 03 	call	0x622	; 0x622 <__nesf2>
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <H_LCD_Void_LCDWriteNumber+0x158>
    2350:	b1 c0       	rjmp	.+354    	; 0x24b4 <H_LCD_Void_LCDWriteNumber+0x2ba>
	{
		//decimal number first
		f32 Local_F32_Checker=0;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	ab 83       	std	Y+3, r26	; 0x03
    2360:	bc 83       	std	Y+4, r27	; 0x04
		do{
			Local_F32_FloatNum=Local_F32_FloatNum*10;
    2362:	6d 81       	ldd	r22, Y+5	; 0x05
    2364:	7e 81       	ldd	r23, Y+6	; 0x06
    2366:	8f 81       	ldd	r24, Y+7	; 0x07
    2368:	98 85       	ldd	r25, Y+8	; 0x08
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	af 83       	std	Y+7, r26	; 0x07
    2380:	b8 87       	std	Y+8, r27	; 0x08
		   Local_F32_Checker=Local_F32_FloatNum -((s32)Local_F32_FloatNum);
    2382:	6d 81       	ldd	r22, Y+5	; 0x05
    2384:	7e 81       	ldd	r23, Y+6	; 0x06
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	98 85       	ldd	r25, Y+8	; 0x08
    238a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	6d 81       	ldd	r22, Y+5	; 0x05
    23a0:	7e 81       	ldd	r23, Y+6	; 0x06
    23a2:	8f 81       	ldd	r24, Y+7	; 0x07
    23a4:	98 85       	ldd	r25, Y+8	; 0x08
    23a6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	ab 83       	std	Y+3, r26	; 0x03
    23b4:	bc 83       	std	Y+4, r27	; 0x04
		   Local_F32_Checker*=10;
    23b6:	69 81       	ldd	r22, Y+1	; 0x01
    23b8:	7a 81       	ldd	r23, Y+2	; 0x02
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	ab 83       	std	Y+3, r26	; 0x03
    23d4:	bc 83       	std	Y+4, r27	; 0x04
        }while((s32)Local_F32_Checker!=0);
    23d6:	69 81       	ldd	r22, Y+1	; 0x01
    23d8:	7a 81       	ldd	r23, Y+2	; 0x02
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	a1 05       	cpc	r26, r1
    23ea:	b1 05       	cpc	r27, r1
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <H_LCD_Void_LCDWriteNumber+0x1f6>
    23ee:	b9 cf       	rjmp	.-142    	; 0x2362 <H_LCD_Void_LCDWriteNumber+0x168>
		do
			{
				Local_S8_Counter++;
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	89 87       	std	Y+9, r24	; 0x09
				Local_U8_Arr[Local_S8_Counter]  =  (s32)Local_F32_FloatNum % 10;
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	08 2f       	mov	r16, r24
    23fa:	11 27       	eor	r17, r17
    23fc:	07 fd       	sbrc	r16, 7
    23fe:	10 95       	com	r17
    2400:	6d 81       	ldd	r22, Y+5	; 0x05
    2402:	7e 81       	ldd	r23, Y+6	; 0x06
    2404:	8f 81       	ldd	r24, Y+7	; 0x07
    2406:	98 85       	ldd	r25, Y+8	; 0x08
    2408:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__divmodsi4>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	28 2f       	mov	r18, r24
    2426:	ce 01       	movw	r24, r28
    2428:	0a 96       	adiw	r24, 0x0a	; 10
    242a:	fc 01       	movw	r30, r24
    242c:	e0 0f       	add	r30, r16
    242e:	f1 1f       	adc	r31, r17
    2430:	20 83       	st	Z, r18
				Local_F32_FloatNum = (s32)Local_F32_FloatNum / 10;
    2432:	6d 81       	ldd	r22, Y+5	; 0x05
    2434:	7e 81       	ldd	r23, Y+6	; 0x06
    2436:	8f 81       	ldd	r24, Y+7	; 0x07
    2438:	98 85       	ldd	r25, Y+8	; 0x08
    243a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__divmodsi4>
    2452:	da 01       	movw	r26, r20
    2454:	c9 01       	movw	r24, r18
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	af 83       	std	Y+7, r26	; 0x07
    2468:	b8 87       	std	Y+8, r27	; 0x08
			}while((s32)Local_F32_FloatNum != 0);
    246a:	6d 81       	ldd	r22, Y+5	; 0x05
    246c:	7e 81       	ldd	r23, Y+6	; 0x06
    246e:	8f 81       	ldd	r24, Y+7	; 0x07
    2470:	98 85       	ldd	r25, Y+8	; 0x08
    2472:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	a1 05       	cpc	r26, r1
    247e:	b1 05       	cpc	r27, r1
    2480:	09 f0       	breq	.+2      	; 0x2484 <H_LCD_Void_LCDWriteNumber+0x28a>
    2482:	b6 cf       	rjmp	.-148    	; 0x23f0 <H_LCD_Void_LCDWriteNumber+0x1f6>
		H_LCD_Void_LCDWriteCharacter('.');
    2484:	8e e2       	ldi	r24, 0x2E	; 46
    2486:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <H_LCD_Void_LCDWriteCharacter>
    248a:	11 c0       	rjmp	.+34     	; 0x24ae <H_LCD_Void_LCDWriteNumber+0x2b4>
		while(Local_S8_Counter >= 0)
			{
				H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	28 2f       	mov	r18, r24
    2490:	33 27       	eor	r19, r19
    2492:	27 fd       	sbrc	r18, 7
    2494:	30 95       	com	r19
    2496:	ce 01       	movw	r24, r28
    2498:	0a 96       	adiw	r24, 0x0a	; 10
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	80 5d       	subi	r24, 0xD0	; 208
    24a4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <H_LCD_Void_LCDWriteCharacter>
				Local_S8_Counter--;
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	89 87       	std	Y+9, r24	; 0x09
				Local_S8_Counter++;
				Local_U8_Arr[Local_S8_Counter]  =  (s32)Local_F32_FloatNum % 10;
				Local_F32_FloatNum = (s32)Local_F32_FloatNum / 10;
			}while((s32)Local_F32_FloatNum != 0);
		H_LCD_Void_LCDWriteCharacter('.');
		while(Local_S8_Counter >= 0)
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	88 23       	and	r24, r24
    24b2:	64 f7       	brge	.-40     	; 0x248c <H_LCD_Void_LCDWriteNumber+0x292>
				Local_S8_Counter--;
			}

	}

}
    24b4:	6d 96       	adiw	r28, 0x1d	; 29
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <H_LCD_Void_LCDGoTo>:
void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <H_LCD_Void_LCDGoTo+0x6>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <H_LCD_Void_LCDGoTo+0x8>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	8b 83       	std	Y+3, r24	; 0x03
    24d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    24da:	80 e8       	ldi	r24, 0x80	; 128
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	80 ec       	ldi	r24, 0xC0	; 192
    24e0:	8a 83       	std	Y+2, r24	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	ce 01       	movw	r24, r28
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	90 81       	ld	r25, Z
    24f4:	8c 81       	ldd	r24, Y+4	; 0x04
    24f6:	89 0f       	add	r24, r25
    24f8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <H_LCD_Void_LCDClear>:
void H_LCD_Void_LCDClear(void)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <H_LCD_Void_LCDWriteCommand>
}
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <H_LCD_Void_SetLCDPins>:
static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	98 2f       	mov	r25, r24
    252e:	91 70       	andi	r25, 0x01	; 1
    2530:	88 e1       	ldi	r24, 0x18	; 24
    2532:	69 2f       	mov	r22, r25
    2534:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	86 95       	lsr	r24
    253c:	98 2f       	mov	r25, r24
    253e:	91 70       	andi	r25, 0x01	; 1
    2540:	89 e1       	ldi	r24, 0x19	; 25
    2542:	69 2f       	mov	r22, r25
    2544:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	86 95       	lsr	r24
    254c:	86 95       	lsr	r24
    254e:	98 2f       	mov	r25, r24
    2550:	91 70       	andi	r25, 0x01	; 1
    2552:	8a e1       	ldi	r24, 0x1A	; 26
    2554:	69 2f       	mov	r22, r25
    2556:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	86 95       	lsr	r24
    255e:	86 95       	lsr	r24
    2560:	86 95       	lsr	r24
    2562:	98 2f       	mov	r25, r24
    2564:	91 70       	andi	r25, 0x01	; 1
    2566:	8b e1       	ldi	r24, 0x1B	; 27
    2568:	69 2f       	mov	r22, r25
    256a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_DIO_Void_SetPinValue>
#endif
}
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <main>:
#define Finger_Sensor_3_Bent 390
#define Finger_Sensor_4_Bent 300
#define Finger_Sensor_5_Bent 150

int main()
{
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	cc 5d       	subi	r28, 0xDC	; 220
    2584:	d0 40       	sbci	r29, 0x00	; 0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInit();
    2590:	0e 94 ab 0c 	call	0x1956	; 0x1956 <H_LCD_Void_LCDInit>
	M_ADC_Void_ADCInit();
    2594:	0e 94 cd 0a 	call	0x159a	; 0x159a <M_ADC_Void_ADCInit>
	u16 Finger_Sensor_1 = 0 , Finger_Sensor_2 = 0 , Finger_Sensor_3 = 0 , Finger_Sensor_4 = 0 , Finger_Sensor_5 = 0;
    2598:	fe 01       	movw	r30, r28
    259a:	e5 52       	subi	r30, 0x25	; 37
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	11 82       	std	Z+1, r1	; 0x01
    25a0:	10 82       	st	Z, r1
    25a2:	fe 01       	movw	r30, r28
    25a4:	e7 52       	subi	r30, 0x27	; 39
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	11 82       	std	Z+1, r1	; 0x01
    25aa:	10 82       	st	Z, r1
    25ac:	fe 01       	movw	r30, r28
    25ae:	e9 52       	subi	r30, 0x29	; 41
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	11 82       	std	Z+1, r1	; 0x01
    25b4:	10 82       	st	Z, r1
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 52       	subi	r30, 0x2B	; 43
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	11 82       	std	Z+1, r1	; 0x01
    25be:	10 82       	st	Z, r1
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 52       	subi	r30, 0x2D	; 45
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	11 82       	std	Z+1, r1	; 0x01
    25c8:	10 82       	st	Z, r1
	 * Finger_Sensor_4 for Middle Finger
	 * Finger_Sensor_5 for Ring Finger
	 */
	while(1)
	{
		H_LCD_Void_LCDClear();
    25ca:	0e 94 85 12 	call	0x250a	; 0x250a <H_LCD_Void_LCDClear>
		Finger_Sensor_1 = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <M_ADC_U16_ADCRead>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e5 52       	subi	r30, 0x25	; 37
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
		Finger_Sensor_2 = M_ADC_U16_ADCRead(ADC_CHANNEL_4);
    25de:	84 e0       	ldi	r24, 0x04	; 4
    25e0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <M_ADC_U16_ADCRead>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e7 52       	subi	r30, 0x27	; 39
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		Finger_Sensor_3 = M_ADC_U16_ADCRead(ADC_CHANNEL_5);
    25ee:	85 e0       	ldi	r24, 0x05	; 5
    25f0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <M_ADC_U16_ADCRead>
    25f4:	fe 01       	movw	r30, r28
    25f6:	e9 52       	subi	r30, 0x29	; 41
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
		Finger_Sensor_4 = M_ADC_U16_ADCRead(ADC_CHANNEL_6);
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	0e 94 0c 0b 	call	0x1618	; 0x1618 <M_ADC_U16_ADCRead>
    2604:	fe 01       	movw	r30, r28
    2606:	eb 52       	subi	r30, 0x2B	; 43
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
		Finger_Sensor_5 = M_ADC_U16_ADCRead(ADC_CHANNEL_7);
    260e:	87 e0       	ldi	r24, 0x07	; 7
    2610:	0e 94 0c 0b 	call	0x1618	; 0x1618 <M_ADC_U16_ADCRead>
    2614:	fe 01       	movw	r30, r28
    2616:	ed 52       	subi	r30, 0x2D	; 45
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
		//No fingers used
		if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    261e:	fe 01       	movw	r30, r28
    2620:	e5 52       	subi	r30, 0x25	; 37
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	82 34       	cpi	r24, 0x42	; 66
    262a:	91 05       	cpc	r25, r1
    262c:	08 f4       	brcc	.+2      	; 0x2630 <main+0xba>
    262e:	e0 c0       	rjmp	.+448    	; 0x27f0 <main+0x27a>
    2630:	fe 01       	movw	r30, r28
    2632:	e7 52       	subi	r30, 0x27	; 39
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	21 e0       	ldi	r18, 0x01	; 1
    263c:	8c 37       	cpi	r24, 0x7C	; 124
    263e:	92 07       	cpc	r25, r18
    2640:	08 f0       	brcs	.+2      	; 0x2644 <main+0xce>
    2642:	d6 c0       	rjmp	.+428    	; 0x27f0 <main+0x27a>
    2644:	fe 01       	movw	r30, r28
    2646:	e9 52       	subi	r30, 0x29	; 41
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	e1 e0       	ldi	r30, 0x01	; 1
    2650:	86 38       	cpi	r24, 0x86	; 134
    2652:	9e 07       	cpc	r25, r30
    2654:	08 f0       	brcs	.+2      	; 0x2658 <main+0xe2>
    2656:	cc c0       	rjmp	.+408    	; 0x27f0 <main+0x27a>
    2658:	fe 01       	movw	r30, r28
    265a:	eb 52       	subi	r30, 0x2B	; 43
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	f1 e0       	ldi	r31, 0x01	; 1
    2664:	8d 32       	cpi	r24, 0x2D	; 45
    2666:	9f 07       	cpc	r25, r31
    2668:	08 f4       	brcc	.+2      	; 0x266c <main+0xf6>
    266a:	c2 c0       	rjmp	.+388    	; 0x27f0 <main+0x27a>
    266c:	fe 01       	movw	r30, r28
    266e:	ed 52       	subi	r30, 0x2D	; 45
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	87 39       	cpi	r24, 0x97	; 151
    2678:	91 05       	cpc	r25, r1
    267a:	08 f4       	brcc	.+2      	; 0x267e <main+0x108>
    267c:	b9 c0       	rjmp	.+370    	; 0x27f0 <main+0x27a>
		{
			H_LCD_Void_LCDWriteString("No to Racism");
    267e:	80 e6       	ldi	r24, 0x60	; 96
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2686:	fe 01       	movw	r30, r28
    2688:	e1 53       	subi	r30, 0x31	; 49
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	aa ef       	ldi	r26, 0xFA	; 250
    2692:	b3 e4       	ldi	r27, 0x43	; 67
    2694:	80 83       	st	Z, r24
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	a2 83       	std	Z+2, r26	; 0x02
    269a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	8e 01       	movw	r16, r28
    269e:	05 53       	subi	r16, 0x35	; 53
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e1 53       	subi	r30, 0x31	; 49
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a e7       	ldi	r20, 0x7A	; 122
    26b6:	55 e4       	ldi	r21, 0x45	; 69
    26b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	f8 01       	movw	r30, r16
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ca:	fe 01       	movw	r30, r28
    26cc:	e5 53       	subi	r30, 0x35	; 53
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	44 f4       	brge	.+16     	; 0x26f8 <main+0x182>
		__ticks = 1;
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 53       	subi	r30, 0x37	; 55
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	64 c0       	rjmp	.+200    	; 0x27c0 <main+0x24a>
	else if (__tmp > 65535)
    26f8:	fe 01       	movw	r30, r28
    26fa:	e5 53       	subi	r30, 0x35	; 53
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	0c f0       	brlt	.+2      	; 0x2718 <main+0x1a2>
    2716:	43 c0       	rjmp	.+134    	; 0x279e <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	fe 01       	movw	r30, r28
    271a:	e1 53       	subi	r30, 0x31	; 49
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8e 01       	movw	r16, r28
    2738:	07 53       	subi	r16, 0x37	; 55
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	f8 01       	movw	r30, r16
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	1f c0       	rjmp	.+62     	; 0x278e <main+0x218>
    2750:	fe 01       	movw	r30, r28
    2752:	e9 53       	subi	r30, 0x39	; 57
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 e9       	ldi	r24, 0x90	; 144
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	fe 01       	movw	r30, r28
    2760:	e9 53       	subi	r30, 0x39	; 57
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x1f2>
    276c:	fe 01       	movw	r30, r28
    276e:	e9 53       	subi	r30, 0x39	; 57
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	de 01       	movw	r26, r28
    2778:	a7 53       	subi	r26, 0x37	; 55
    277a:	bf 4f       	sbci	r27, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	e7 53       	subi	r30, 0x37	; 55
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	fe 01       	movw	r30, r28
    2790:	e7 53       	subi	r30, 0x37	; 55
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	d1 f6       	brne	.-76     	; 0x2750 <main+0x1da>
    279c:	16 cf       	rjmp	.-468    	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	8e 01       	movw	r16, r28
    27a0:	07 53       	subi	r16, 0x37	; 55
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	e5 53       	subi	r30, 0x35	; 53
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	f8 01       	movw	r30, r16
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
    27c0:	de 01       	movw	r26, r28
    27c2:	ab 53       	subi	r26, 0x3B	; 59
    27c4:	bf 4f       	sbci	r27, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	e7 53       	subi	r30, 0x37	; 55
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	11 96       	adiw	r26, 0x01	; 1
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 53       	subi	r30, 0x3B	; 59
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <main+0x26a>
    27e4:	fe 01       	movw	r30, r28
    27e6:	eb 53       	subi	r30, 0x3B	; 59
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	ed ce       	rjmp	.-550    	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//One finger used
		// print Hi if first finger only flexed
		else if(Finger_Sensor_1 >Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    27f0:	fe 01       	movw	r30, r28
    27f2:	e5 52       	subi	r30, 0x25	; 37
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	82 34       	cpi	r24, 0x42	; 66
    27fc:	91 05       	cpc	r25, r1
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <main+0x28c>
    2800:	e0 c0       	rjmp	.+448    	; 0x29c2 <main+0x44c>
    2802:	fe 01       	movw	r30, r28
    2804:	e7 52       	subi	r30, 0x27	; 39
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	f1 e0       	ldi	r31, 0x01	; 1
    280e:	8c 37       	cpi	r24, 0x7C	; 124
    2810:	9f 07       	cpc	r25, r31
    2812:	08 f0       	brcs	.+2      	; 0x2816 <main+0x2a0>
    2814:	d6 c0       	rjmp	.+428    	; 0x29c2 <main+0x44c>
    2816:	fe 01       	movw	r30, r28
    2818:	e9 52       	subi	r30, 0x29	; 41
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	21 e0       	ldi	r18, 0x01	; 1
    2822:	87 38       	cpi	r24, 0x87	; 135
    2824:	92 07       	cpc	r25, r18
    2826:	08 f4       	brcc	.+2      	; 0x282a <main+0x2b4>
    2828:	cc c0       	rjmp	.+408    	; 0x29c2 <main+0x44c>
    282a:	fe 01       	movw	r30, r28
    282c:	eb 52       	subi	r30, 0x2B	; 43
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	91 81       	ldd	r25, Z+1	; 0x01
    2834:	e1 e0       	ldi	r30, 0x01	; 1
    2836:	8d 32       	cpi	r24, 0x2D	; 45
    2838:	9e 07       	cpc	r25, r30
    283a:	08 f4       	brcc	.+2      	; 0x283e <main+0x2c8>
    283c:	c2 c0       	rjmp	.+388    	; 0x29c2 <main+0x44c>
    283e:	fe 01       	movw	r30, r28
    2840:	ed 52       	subi	r30, 0x2D	; 45
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	87 39       	cpi	r24, 0x97	; 151
    284a:	91 05       	cpc	r25, r1
    284c:	08 f4       	brcc	.+2      	; 0x2850 <main+0x2da>
    284e:	b9 c0       	rjmp	.+370    	; 0x29c2 <main+0x44c>
		{
			H_LCD_Void_LCDWriteString("Hi");
    2850:	8d e6       	ldi	r24, 0x6D	; 109
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2858:	fe 01       	movw	r30, r28
    285a:	ef 53       	subi	r30, 0x3F	; 63
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	aa ef       	ldi	r26, 0xFA	; 250
    2864:	b3 e4       	ldi	r27, 0x43	; 67
    2866:	80 83       	st	Z, r24
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	a2 83       	std	Z+2, r26	; 0x02
    286c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	8e 01       	movw	r16, r28
    2870:	03 54       	subi	r16, 0x43	; 67
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	ef 53       	subi	r30, 0x3F	; 63
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a e7       	ldi	r20, 0x7A	; 122
    2888:	55 e4       	ldi	r21, 0x45	; 69
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	80 83       	st	Z, r24
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	a2 83       	std	Z+2, r26	; 0x02
    289a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289c:	fe 01       	movw	r30, r28
    289e:	e3 54       	subi	r30, 0x43	; 67
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	44 f4       	brge	.+16     	; 0x28ca <main+0x354>
		__ticks = 1;
    28ba:	fe 01       	movw	r30, r28
    28bc:	e5 54       	subi	r30, 0x45	; 69
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	64 c0       	rjmp	.+200    	; 0x2992 <main+0x41c>
	else if (__tmp > 65535)
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 54       	subi	r30, 0x43	; 67
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	0c f0       	brlt	.+2      	; 0x28ea <main+0x374>
    28e8:	43 c0       	rjmp	.+134    	; 0x2970 <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	fe 01       	movw	r30, r28
    28ec:	ef 53       	subi	r30, 0x3F	; 63
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8e 01       	movw	r16, r28
    290a:	05 54       	subi	r16, 0x45	; 69
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	f8 01       	movw	r30, r16
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	1f c0       	rjmp	.+62     	; 0x2960 <main+0x3ea>
    2922:	fe 01       	movw	r30, r28
    2924:	e7 54       	subi	r30, 0x47	; 71
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 e9       	ldi	r24, 0x90	; 144
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	fe 01       	movw	r30, r28
    2932:	e7 54       	subi	r30, 0x47	; 71
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <main+0x3c4>
    293e:	fe 01       	movw	r30, r28
    2940:	e7 54       	subi	r30, 0x47	; 71
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2948:	de 01       	movw	r26, r28
    294a:	a5 54       	subi	r26, 0x45	; 69
    294c:	bf 4f       	sbci	r27, 0xFF	; 255
    294e:	fe 01       	movw	r30, r28
    2950:	e5 54       	subi	r30, 0x45	; 69
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	11 96       	adiw	r26, 0x01	; 1
    295c:	9c 93       	st	X, r25
    295e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	fe 01       	movw	r30, r28
    2962:	e5 54       	subi	r30, 0x45	; 69
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	d1 f6       	brne	.-76     	; 0x2922 <main+0x3ac>
    296e:	2d ce       	rjmp	.-934    	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	8e 01       	movw	r16, r28
    2972:	05 54       	subi	r16, 0x45	; 69
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e3 54       	subi	r30, 0x43	; 67
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	de 01       	movw	r26, r28
    2994:	a9 54       	subi	r26, 0x49	; 73
    2996:	bf 4f       	sbci	r27, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	e5 54       	subi	r30, 0x45	; 69
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	11 96       	adiw	r26, 0x01	; 1
    29a4:	9c 93       	st	X, r25
    29a6:	8e 93       	st	-X, r24
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 54       	subi	r30, 0x49	; 73
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <main+0x43c>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 54       	subi	r30, 0x49	; 73
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	04 ce       	rjmp	.-1016   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e5 52       	subi	r30, 0x25	; 37
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	82 34       	cpi	r24, 0x42	; 66
    29ce:	91 05       	cpc	r25, r1
    29d0:	08 f4       	brcc	.+2      	; 0x29d4 <main+0x45e>
    29d2:	e0 c0       	rjmp	.+448    	; 0x2b94 <main+0x61e>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e7 52       	subi	r30, 0x27	; 39
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	f1 e0       	ldi	r31, 0x01	; 1
    29e0:	8c 37       	cpi	r24, 0x7C	; 124
    29e2:	9f 07       	cpc	r25, r31
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <main+0x472>
    29e6:	d6 c0       	rjmp	.+428    	; 0x2b94 <main+0x61e>
    29e8:	fe 01       	movw	r30, r28
    29ea:	e9 52       	subi	r30, 0x29	; 41
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	86 38       	cpi	r24, 0x86	; 134
    29f6:	92 07       	cpc	r25, r18
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <main+0x486>
    29fa:	cc c0       	rjmp	.+408    	; 0x2b94 <main+0x61e>
    29fc:	fe 01       	movw	r30, r28
    29fe:	eb 52       	subi	r30, 0x2B	; 43
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	e1 e0       	ldi	r30, 0x01	; 1
    2a08:	8c 32       	cpi	r24, 0x2C	; 44
    2a0a:	9e 07       	cpc	r25, r30
    2a0c:	08 f0       	brcs	.+2      	; 0x2a10 <main+0x49a>
    2a0e:	c2 c0       	rjmp	.+388    	; 0x2b94 <main+0x61e>
    2a10:	fe 01       	movw	r30, r28
    2a12:	ed 52       	subi	r30, 0x2D	; 45
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
    2a1a:	87 39       	cpi	r24, 0x97	; 151
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	08 f4       	brcc	.+2      	; 0x2a22 <main+0x4ac>
    2a20:	b9 c0       	rjmp	.+370    	; 0x2b94 <main+0x61e>
		{
			H_LCD_Void_LCDWriteString("Fuck You");
    2a22:	80 e7       	ldi	r24, 0x70	; 112
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ed 54       	subi	r30, 0x4D	; 77
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	aa ef       	ldi	r26, 0xFA	; 250
    2a36:	b3 e4       	ldi	r27, 0x43	; 67
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	8e 01       	movw	r16, r28
    2a42:	01 55       	subi	r16, 0x51	; 81
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 54       	subi	r30, 0x4D	; 77
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	55 e4       	ldi	r21, 0x45	; 69
    2a5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e1 55       	subi	r30, 0x51	; 81
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	44 f4       	brge	.+16     	; 0x2a9c <main+0x526>
		__ticks = 1;
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e3 55       	subi	r30, 0x53	; 83
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
    2a9a:	64 c0       	rjmp	.+200    	; 0x2b64 <main+0x5ee>
	else if (__tmp > 65535)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e1 55       	subi	r30, 0x51	; 81
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	0c f0       	brlt	.+2      	; 0x2abc <main+0x546>
    2aba:	43 c0       	rjmp	.+134    	; 0x2b42 <main+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	fe 01       	movw	r30, r28
    2abe:	ed 54       	subi	r30, 0x4D	; 77
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	8e 01       	movw	r16, r28
    2adc:	03 55       	subi	r16, 0x53	; 83
    2ade:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	f8 01       	movw	r30, r16
    2aee:	91 83       	std	Z+1, r25	; 0x01
    2af0:	80 83       	st	Z, r24
    2af2:	1f c0       	rjmp	.+62     	; 0x2b32 <main+0x5bc>
    2af4:	fe 01       	movw	r30, r28
    2af6:	e5 55       	subi	r30, 0x55	; 85
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 e9       	ldi	r24, 0x90	; 144
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	fe 01       	movw	r30, r28
    2b04:	e5 55       	subi	r30, 0x55	; 85
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <main+0x596>
    2b10:	fe 01       	movw	r30, r28
    2b12:	e5 55       	subi	r30, 0x55	; 85
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	de 01       	movw	r26, r28
    2b1c:	a3 55       	subi	r26, 0x53	; 83
    2b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b20:	fe 01       	movw	r30, r28
    2b22:	e3 55       	subi	r30, 0x53	; 83
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	9c 93       	st	X, r25
    2b30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b32:	fe 01       	movw	r30, r28
    2b34:	e3 55       	subi	r30, 0x53	; 83
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	d1 f6       	brne	.-76     	; 0x2af4 <main+0x57e>
    2b40:	44 cd       	rjmp	.-1400   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	8e 01       	movw	r16, r28
    2b44:	03 55       	subi	r16, 0x53	; 83
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e1 55       	subi	r30, 0x51	; 81
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	f8 01       	movw	r30, r16
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	de 01       	movw	r26, r28
    2b66:	a7 55       	subi	r26, 0x57	; 87
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e3 55       	subi	r30, 0x53	; 83
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	9c 93       	st	X, r25
    2b78:	8e 93       	st	-X, r24
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e7 55       	subi	r30, 0x57	; 87
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0x60e>
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e7 55       	subi	r30, 0x57	; 87
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	1b cd       	rjmp	.-1482   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    2b94:	fe 01       	movw	r30, r28
    2b96:	e5 52       	subi	r30, 0x25	; 37
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	82 34       	cpi	r24, 0x42	; 66
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	08 f4       	brcc	.+2      	; 0x2ba6 <main+0x630>
    2ba4:	e0 c0       	rjmp	.+448    	; 0x2d66 <main+0x7f0>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e7 52       	subi	r30, 0x27	; 39
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	f1 e0       	ldi	r31, 0x01	; 1
    2bb2:	8d 37       	cpi	r24, 0x7D	; 125
    2bb4:	9f 07       	cpc	r25, r31
    2bb6:	08 f4       	brcc	.+2      	; 0x2bba <main+0x644>
    2bb8:	d6 c0       	rjmp	.+428    	; 0x2d66 <main+0x7f0>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e9 52       	subi	r30, 0x29	; 41
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	21 e0       	ldi	r18, 0x01	; 1
    2bc6:	86 38       	cpi	r24, 0x86	; 134
    2bc8:	92 07       	cpc	r25, r18
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <main+0x658>
    2bcc:	cc c0       	rjmp	.+408    	; 0x2d66 <main+0x7f0>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	eb 52       	subi	r30, 0x2B	; 43
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	e1 e0       	ldi	r30, 0x01	; 1
    2bda:	8d 32       	cpi	r24, 0x2D	; 45
    2bdc:	9e 07       	cpc	r25, r30
    2bde:	08 f4       	brcc	.+2      	; 0x2be2 <main+0x66c>
    2be0:	c2 c0       	rjmp	.+388    	; 0x2d66 <main+0x7f0>
    2be2:	fe 01       	movw	r30, r28
    2be4:	ed 52       	subi	r30, 0x2D	; 45
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	87 39       	cpi	r24, 0x97	; 151
    2bee:	91 05       	cpc	r25, r1
    2bf0:	08 f4       	brcc	.+2      	; 0x2bf4 <main+0x67e>
    2bf2:	b9 c0       	rjmp	.+370    	; 0x2d66 <main+0x7f0>
		{
			H_LCD_Void_LCDWriteString("OK");
    2bf4:	89 e7       	ldi	r24, 0x79	; 121
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	eb 55       	subi	r30, 0x5B	; 91
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	aa ef       	ldi	r26, 0xFA	; 250
    2c08:	b3 e4       	ldi	r27, 0x43	; 67
    2c0a:	80 83       	st	Z, r24
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	a2 83       	std	Z+2, r26	; 0x02
    2c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	8e 01       	movw	r16, r28
    2c14:	0f 55       	subi	r16, 0x5F	; 95
    2c16:	1f 4f       	sbci	r17, 0xFF	; 255
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 55       	subi	r30, 0x5B	; 91
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a e7       	ldi	r20, 0x7A	; 122
    2c2c:	55 e4       	ldi	r21, 0x45	; 69
    2c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	f8 01       	movw	r30, r16
    2c38:	80 83       	st	Z, r24
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	a2 83       	std	Z+2, r26	; 0x02
    2c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c40:	fe 01       	movw	r30, r28
    2c42:	ef 55       	subi	r30, 0x5F	; 95
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e8       	ldi	r20, 0x80	; 128
    2c54:	5f e3       	ldi	r21, 0x3F	; 63
    2c56:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2c5a:	88 23       	and	r24, r24
    2c5c:	44 f4       	brge	.+16     	; 0x2c6e <main+0x6f8>
		__ticks = 1;
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e1 56       	subi	r30, 0x61	; 97
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	64 c0       	rjmp	.+200    	; 0x2d36 <main+0x7c0>
	else if (__tmp > 65535)
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 55       	subi	r30, 0x5F	; 95
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <main+0x718>
    2c8c:	43 c0       	rjmp	.+134    	; 0x2d14 <main+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 55       	subi	r30, 0x5B	; 91
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8e 01       	movw	r16, r28
    2cae:	01 56       	subi	r16, 0x61	; 97
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	1f c0       	rjmp	.+62     	; 0x2d04 <main+0x78e>
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e3 56       	subi	r30, 0x63	; 99
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 e9       	ldi	r24, 0x90	; 144
    2cce:	91 e0       	ldi	r25, 0x01	; 1
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	80 83       	st	Z, r24
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e3 56       	subi	r30, 0x63	; 99
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <main+0x768>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e3 56       	subi	r30, 0x63	; 99
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	de 01       	movw	r26, r28
    2cee:	a1 56       	subi	r26, 0x61	; 97
    2cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 56       	subi	r30, 0x61	; 97
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	11 96       	adiw	r26, 0x01	; 1
    2d00:	9c 93       	st	X, r25
    2d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	fe 01       	movw	r30, r28
    2d06:	e1 56       	subi	r30, 0x61	; 97
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	d1 f6       	brne	.-76     	; 0x2cc6 <main+0x750>
    2d12:	5b cc       	rjmp	.-1866   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	8e 01       	movw	r16, r28
    2d16:	01 56       	subi	r16, 0x61	; 97
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ef 55       	subi	r30, 0x5F	; 95
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	60 81       	ld	r22, Z
    2d22:	71 81       	ldd	r23, Z+1	; 0x01
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	f8 01       	movw	r30, r16
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	de 01       	movw	r26, r28
    2d38:	a5 56       	subi	r26, 0x65	; 101
    2d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e1 56       	subi	r30, 0x61	; 97
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	11 96       	adiw	r26, 0x01	; 1
    2d48:	9c 93       	st	X, r25
    2d4a:	8e 93       	st	-X, r24
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e5 56       	subi	r30, 0x65	; 101
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <main+0x7e0>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e5 56       	subi	r30, 0x65	; 101
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	32 cc       	rjmp	.-1948   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//2 Fingers used
		//print Nice to meet you at victory sign
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    2d66:	fe 01       	movw	r30, r28
    2d68:	e5 52       	subi	r30, 0x25	; 37
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	82 34       	cpi	r24, 0x42	; 66
    2d72:	91 05       	cpc	r25, r1
    2d74:	08 f4       	brcc	.+2      	; 0x2d78 <main+0x802>
    2d76:	e0 c0       	rjmp	.+448    	; 0x2f38 <main+0x9c2>
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e7 52       	subi	r30, 0x27	; 39
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	f1 e0       	ldi	r31, 0x01	; 1
    2d84:	8c 37       	cpi	r24, 0x7C	; 124
    2d86:	9f 07       	cpc	r25, r31
    2d88:	08 f0       	brcs	.+2      	; 0x2d8c <main+0x816>
    2d8a:	d6 c0       	rjmp	.+428    	; 0x2f38 <main+0x9c2>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e9 52       	subi	r30, 0x29	; 41
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	87 38       	cpi	r24, 0x87	; 135
    2d9a:	92 07       	cpc	r25, r18
    2d9c:	08 f4       	brcc	.+2      	; 0x2da0 <main+0x82a>
    2d9e:	cc c0       	rjmp	.+408    	; 0x2f38 <main+0x9c2>
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 52       	subi	r30, 0x2B	; 43
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	e1 e0       	ldi	r30, 0x01	; 1
    2dac:	8c 32       	cpi	r24, 0x2C	; 44
    2dae:	9e 07       	cpc	r25, r30
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <main+0x83e>
    2db2:	c2 c0       	rjmp	.+388    	; 0x2f38 <main+0x9c2>
    2db4:	fe 01       	movw	r30, r28
    2db6:	ed 52       	subi	r30, 0x2D	; 45
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	87 39       	cpi	r24, 0x97	; 151
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <main+0x850>
    2dc4:	b9 c0       	rjmp	.+370    	; 0x2f38 <main+0x9c2>
		{
			H_LCD_Void_LCDWriteString("Nice to meet you");
    2dc6:	8c e7       	ldi	r24, 0x7C	; 124
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 56       	subi	r30, 0x69	; 105
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	aa ef       	ldi	r26, 0xFA	; 250
    2dda:	b3 e4       	ldi	r27, 0x43	; 67
    2ddc:	80 83       	st	Z, r24
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	a2 83       	std	Z+2, r26	; 0x02
    2de2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de4:	8e 01       	movw	r16, r28
    2de6:	0d 56       	subi	r16, 0x6D	; 109
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	fe 01       	movw	r30, r28
    2dec:	e9 56       	subi	r30, 0x69	; 105
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a e7       	ldi	r20, 0x7A	; 122
    2dfe:	55 e4       	ldi	r21, 0x45	; 69
    2e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	80 83       	st	Z, r24
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	a2 83       	std	Z+2, r26	; 0x02
    2e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 56       	subi	r30, 0x6D	; 109
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	44 f4       	brge	.+16     	; 0x2e40 <main+0x8ca>
		__ticks = 1;
    2e30:	fe 01       	movw	r30, r28
    2e32:	ef 56       	subi	r30, 0x6F	; 111
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    2e3e:	64 c0       	rjmp	.+200    	; 0x2f08 <main+0x992>
	else if (__tmp > 65535)
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 56       	subi	r30, 0x6D	; 109
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	0c f0       	brlt	.+2      	; 0x2e60 <main+0x8ea>
    2e5e:	43 c0       	rjmp	.+134    	; 0x2ee6 <main+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	fe 01       	movw	r30, r28
    2e62:	e9 56       	subi	r30, 0x69	; 105
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8e 01       	movw	r16, r28
    2e80:	0f 56       	subi	r16, 0x6F	; 111
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	f8 01       	movw	r30, r16
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
    2e96:	1f c0       	rjmp	.+62     	; 0x2ed6 <main+0x960>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e1 57       	subi	r30, 0x71	; 113
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 e9       	ldi	r24, 0x90	; 144
    2ea0:	91 e0       	ldi	r25, 0x01	; 1
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e1 57       	subi	r30, 0x71	; 113
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <main+0x93a>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e1 57       	subi	r30, 0x71	; 113
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebe:	de 01       	movw	r26, r28
    2ec0:	af 56       	subi	r26, 0x6F	; 111
    2ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ef 56       	subi	r30, 0x6F	; 111
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	9c 93       	st	X, r25
    2ed4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ef 56       	subi	r30, 0x6F	; 111
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	d1 f6       	brne	.-76     	; 0x2e98 <main+0x922>
    2ee4:	72 cb       	rjmp	.-2332   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	0f 56       	subi	r16, 0x6F	; 111
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 56       	subi	r30, 0x6D	; 109
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	f8 01       	movw	r30, r16
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	de 01       	movw	r26, r28
    2f0a:	a3 57       	subi	r26, 0x73	; 115
    2f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ef 56       	subi	r30, 0x6F	; 111
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	11 96       	adiw	r26, 0x01	; 1
    2f1a:	9c 93       	st	X, r25
    2f1c:	8e 93       	st	-X, r24
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e3 57       	subi	r30, 0x73	; 115
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <main+0x9b2>
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e3 57       	subi	r30, 0x73	; 115
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
    2f36:	49 cb       	rjmp	.-2414   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e5 52       	subi	r30, 0x25	; 37
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	81 34       	cpi	r24, 0x41	; 65
    2f44:	91 05       	cpc	r25, r1
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <main+0x9d4>
    2f48:	e0 c0       	rjmp	.+448    	; 0x310a <main+0xb94>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e7 52       	subi	r30, 0x27	; 39
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	f1 e0       	ldi	r31, 0x01	; 1
    2f56:	8d 37       	cpi	r24, 0x7D	; 125
    2f58:	9f 07       	cpc	r25, r31
    2f5a:	08 f4       	brcc	.+2      	; 0x2f5e <main+0x9e8>
    2f5c:	d6 c0       	rjmp	.+428    	; 0x310a <main+0xb94>
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e9 52       	subi	r30, 0x29	; 41
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	21 e0       	ldi	r18, 0x01	; 1
    2f6a:	87 38       	cpi	r24, 0x87	; 135
    2f6c:	92 07       	cpc	r25, r18
    2f6e:	08 f4       	brcc	.+2      	; 0x2f72 <main+0x9fc>
    2f70:	cc c0       	rjmp	.+408    	; 0x310a <main+0xb94>
    2f72:	fe 01       	movw	r30, r28
    2f74:	eb 52       	subi	r30, 0x2B	; 43
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	e1 e0       	ldi	r30, 0x01	; 1
    2f7e:	8d 32       	cpi	r24, 0x2D	; 45
    2f80:	9e 07       	cpc	r25, r30
    2f82:	08 f4       	brcc	.+2      	; 0x2f86 <main+0xa10>
    2f84:	c2 c0       	rjmp	.+388    	; 0x310a <main+0xb94>
    2f86:	fe 01       	movw	r30, r28
    2f88:	ed 52       	subi	r30, 0x2D	; 45
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	86 39       	cpi	r24, 0x96	; 150
    2f92:	91 05       	cpc	r25, r1
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <main+0xa22>
    2f96:	b9 c0       	rjmp	.+370    	; 0x310a <main+0xb94>
		{
			H_LCD_Void_LCDWriteString("No");
    2f98:	8d e8       	ldi	r24, 0x8D	; 141
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e7 57       	subi	r30, 0x77	; 119
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	aa ef       	ldi	r26, 0xFA	; 250
    2fac:	b3 e4       	ldi	r27, 0x43	; 67
    2fae:	80 83       	st	Z, r24
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	a2 83       	std	Z+2, r26	; 0x02
    2fb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	0b 57       	subi	r16, 0x7B	; 123
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e7 57       	subi	r30, 0x77	; 119
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a e7       	ldi	r20, 0x7A	; 122
    2fd0:	55 e4       	ldi	r21, 0x45	; 69
    2fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	f8 01       	movw	r30, r16
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	eb 57       	subi	r30, 0x7B	; 123
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f e3       	ldi	r21, 0x3F	; 63
    2ffa:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2ffe:	88 23       	and	r24, r24
    3000:	44 f4       	brge	.+16     	; 0x3012 <main+0xa9c>
		__ticks = 1;
    3002:	fe 01       	movw	r30, r28
    3004:	ed 57       	subi	r30, 0x7D	; 125
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    3010:	64 c0       	rjmp	.+200    	; 0x30da <main+0xb64>
	else if (__tmp > 65535)
    3012:	fe 01       	movw	r30, r28
    3014:	eb 57       	subi	r30, 0x7B	; 123
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	0c f0       	brlt	.+2      	; 0x3032 <main+0xabc>
    3030:	43 c0       	rjmp	.+134    	; 0x30b8 <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3032:	fe 01       	movw	r30, r28
    3034:	e7 57       	subi	r30, 0x77	; 119
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8e 01       	movw	r16, r28
    3052:	0d 57       	subi	r16, 0x7D	; 125
    3054:	1f 4f       	sbci	r17, 0xFF	; 255
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	1f c0       	rjmp	.+62     	; 0x30a8 <main+0xb32>
    306a:	fe 01       	movw	r30, r28
    306c:	ef 57       	subi	r30, 0x7F	; 127
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 e9       	ldi	r24, 0x90	; 144
    3072:	91 e0       	ldi	r25, 0x01	; 1
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
    3078:	fe 01       	movw	r30, r28
    307a:	ef 57       	subi	r30, 0x7F	; 127
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <main+0xb0c>
    3086:	fe 01       	movw	r30, r28
    3088:	ef 57       	subi	r30, 0x7F	; 127
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	de 01       	movw	r26, r28
    3092:	ad 57       	subi	r26, 0x7D	; 125
    3094:	bf 4f       	sbci	r27, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	ed 57       	subi	r30, 0x7D	; 125
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	11 96       	adiw	r26, 0x01	; 1
    30a4:	9c 93       	st	X, r25
    30a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	fe 01       	movw	r30, r28
    30aa:	ed 57       	subi	r30, 0x7D	; 125
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	d1 f6       	brne	.-76     	; 0x306a <main+0xaf4>
    30b6:	89 ca       	rjmp	.-2798   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	8e 01       	movw	r16, r28
    30ba:	0d 57       	subi	r16, 0x7D	; 125
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	eb 57       	subi	r30, 0x7B	; 123
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	f8 01       	movw	r30, r16
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	de 01       	movw	r26, r28
    30dc:	a1 58       	subi	r26, 0x81	; 129
    30de:	bf 4f       	sbci	r27, 0xFF	; 255
    30e0:	fe 01       	movw	r30, r28
    30e2:	ed 57       	subi	r30, 0x7D	; 125
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	11 96       	adiw	r26, 0x01	; 1
    30ec:	9c 93       	st	X, r25
    30ee:	8e 93       	st	-X, r24
    30f0:	fe 01       	movw	r30, r28
    30f2:	e1 58       	subi	r30, 0x81	; 129
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <main+0xb84>
    30fe:	fe 01       	movw	r30, r28
    3100:	e1 58       	subi	r30, 0x81	; 129
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    3108:	60 ca       	rjmp	.-2880   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    310a:	fe 01       	movw	r30, r28
    310c:	e5 52       	subi	r30, 0x25	; 37
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	81 34       	cpi	r24, 0x41	; 65
    3116:	91 05       	cpc	r25, r1
    3118:	08 f0       	brcs	.+2      	; 0x311c <main+0xba6>
    311a:	e0 c0       	rjmp	.+448    	; 0x32dc <main+0xd66>
    311c:	fe 01       	movw	r30, r28
    311e:	e7 52       	subi	r30, 0x27	; 39
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	f1 e0       	ldi	r31, 0x01	; 1
    3128:	8c 37       	cpi	r24, 0x7C	; 124
    312a:	9f 07       	cpc	r25, r31
    312c:	08 f0       	brcs	.+2      	; 0x3130 <main+0xbba>
    312e:	d6 c0       	rjmp	.+428    	; 0x32dc <main+0xd66>
    3130:	fe 01       	movw	r30, r28
    3132:	e9 52       	subi	r30, 0x29	; 41
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	21 e0       	ldi	r18, 0x01	; 1
    313c:	87 38       	cpi	r24, 0x87	; 135
    313e:	92 07       	cpc	r25, r18
    3140:	08 f4       	brcc	.+2      	; 0x3144 <main+0xbce>
    3142:	cc c0       	rjmp	.+408    	; 0x32dc <main+0xd66>
    3144:	fe 01       	movw	r30, r28
    3146:	eb 52       	subi	r30, 0x2B	; 43
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 81       	ld	r24, Z
    314c:	91 81       	ldd	r25, Z+1	; 0x01
    314e:	e1 e0       	ldi	r30, 0x01	; 1
    3150:	8d 32       	cpi	r24, 0x2D	; 45
    3152:	9e 07       	cpc	r25, r30
    3154:	08 f4       	brcc	.+2      	; 0x3158 <main+0xbe2>
    3156:	c2 c0       	rjmp	.+388    	; 0x32dc <main+0xd66>
    3158:	fe 01       	movw	r30, r28
    315a:	ed 52       	subi	r30, 0x2D	; 45
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	87 39       	cpi	r24, 0x97	; 151
    3164:	91 05       	cpc	r25, r1
    3166:	08 f4       	brcc	.+2      	; 0x316a <main+0xbf4>
    3168:	b9 c0       	rjmp	.+370    	; 0x32dc <main+0xd66>
		{
			H_LCD_Void_LCDWriteString("Yes");
    316a:	80 e9       	ldi	r24, 0x90	; 144
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3172:	fe 01       	movw	r30, r28
    3174:	e5 58       	subi	r30, 0x85	; 133
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	aa ef       	ldi	r26, 0xFA	; 250
    317e:	b3 e4       	ldi	r27, 0x43	; 67
    3180:	80 83       	st	Z, r24
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	a2 83       	std	Z+2, r26	; 0x02
    3186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3188:	8e 01       	movw	r16, r28
    318a:	09 58       	subi	r16, 0x89	; 137
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	e5 58       	subi	r30, 0x85	; 133
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a e7       	ldi	r20, 0x7A	; 122
    31a2:	55 e4       	ldi	r21, 0x45	; 69
    31a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	f8 01       	movw	r30, r16
    31ae:	80 83       	st	Z, r24
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	a2 83       	std	Z+2, r26	; 0x02
    31b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31b6:	fe 01       	movw	r30, r28
    31b8:	e9 58       	subi	r30, 0x89	; 137
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e8       	ldi	r20, 0x80	; 128
    31ca:	5f e3       	ldi	r21, 0x3F	; 63
    31cc:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    31d0:	88 23       	and	r24, r24
    31d2:	44 f4       	brge	.+16     	; 0x31e4 <main+0xc6e>
		__ticks = 1;
    31d4:	fe 01       	movw	r30, r28
    31d6:	eb 58       	subi	r30, 0x8B	; 139
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	91 83       	std	Z+1, r25	; 0x01
    31e0:	80 83       	st	Z, r24
    31e2:	64 c0       	rjmp	.+200    	; 0x32ac <main+0xd36>
	else if (__tmp > 65535)
    31e4:	fe 01       	movw	r30, r28
    31e6:	e9 58       	subi	r30, 0x89	; 137
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	60 81       	ld	r22, Z
    31ec:	71 81       	ldd	r23, Z+1	; 0x01
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	3f ef       	ldi	r19, 0xFF	; 255
    31f6:	4f e7       	ldi	r20, 0x7F	; 127
    31f8:	57 e4       	ldi	r21, 0x47	; 71
    31fa:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	0c f0       	brlt	.+2      	; 0x3204 <main+0xc8e>
    3202:	43 c0       	rjmp	.+134    	; 0x328a <main+0xd14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	fe 01       	movw	r30, r28
    3206:	e5 58       	subi	r30, 0x85	; 133
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e2       	ldi	r20, 0x20	; 32
    3218:	51 e4       	ldi	r21, 0x41	; 65
    321a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	8e 01       	movw	r16, r28
    3224:	0b 58       	subi	r16, 0x8B	; 139
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	f8 01       	movw	r30, r16
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	1f c0       	rjmp	.+62     	; 0x327a <main+0xd04>
    323c:	fe 01       	movw	r30, r28
    323e:	ed 58       	subi	r30, 0x8D	; 141
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 e9       	ldi	r24, 0x90	; 144
    3244:	91 e0       	ldi	r25, 0x01	; 1
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
    324a:	fe 01       	movw	r30, r28
    324c:	ed 58       	subi	r30, 0x8D	; 141
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	91 81       	ldd	r25, Z+1	; 0x01
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <main+0xcde>
    3258:	fe 01       	movw	r30, r28
    325a:	ed 58       	subi	r30, 0x8D	; 141
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	91 83       	std	Z+1, r25	; 0x01
    3260:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3262:	de 01       	movw	r26, r28
    3264:	ab 58       	subi	r26, 0x8B	; 139
    3266:	bf 4f       	sbci	r27, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	eb 58       	subi	r30, 0x8B	; 139
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	11 96       	adiw	r26, 0x01	; 1
    3276:	9c 93       	st	X, r25
    3278:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	fe 01       	movw	r30, r28
    327c:	eb 58       	subi	r30, 0x8B	; 139
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 81       	ld	r24, Z
    3282:	91 81       	ldd	r25, Z+1	; 0x01
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	d1 f6       	brne	.-76     	; 0x323c <main+0xcc6>
    3288:	a0 c9       	rjmp	.-3264   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328a:	8e 01       	movw	r16, r28
    328c:	0b 58       	subi	r16, 0x8B	; 139
    328e:	1f 4f       	sbci	r17, 0xFF	; 255
    3290:	fe 01       	movw	r30, r28
    3292:	e9 58       	subi	r30, 0x89	; 137
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	f8 01       	movw	r30, r16
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
    32ac:	de 01       	movw	r26, r28
    32ae:	af 58       	subi	r26, 0x8F	; 143
    32b0:	bf 4f       	sbci	r27, 0xFF	; 255
    32b2:	fe 01       	movw	r30, r28
    32b4:	eb 58       	subi	r30, 0x8B	; 139
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	11 96       	adiw	r26, 0x01	; 1
    32be:	9c 93       	st	X, r25
    32c0:	8e 93       	st	-X, r24
    32c2:	fe 01       	movw	r30, r28
    32c4:	ef 58       	subi	r30, 0x8F	; 143
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 81       	ld	r24, Z
    32ca:	91 81       	ldd	r25, Z+1	; 0x01
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <main+0xd56>
    32d0:	fe 01       	movw	r30, r28
    32d2:	ef 58       	subi	r30, 0x8F	; 143
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	80 83       	st	Z, r24
    32da:	77 c9       	rjmp	.-3346   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    32dc:	fe 01       	movw	r30, r28
    32de:	e5 52       	subi	r30, 0x25	; 37
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	82 34       	cpi	r24, 0x42	; 66
    32e8:	91 05       	cpc	r25, r1
    32ea:	08 f4       	brcc	.+2      	; 0x32ee <main+0xd78>
    32ec:	e0 c0       	rjmp	.+448    	; 0x34ae <main+0xf38>
    32ee:	fe 01       	movw	r30, r28
    32f0:	e7 52       	subi	r30, 0x27	; 39
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	f1 e0       	ldi	r31, 0x01	; 1
    32fa:	8d 37       	cpi	r24, 0x7D	; 125
    32fc:	9f 07       	cpc	r25, r31
    32fe:	08 f4       	brcc	.+2      	; 0x3302 <main+0xd8c>
    3300:	d6 c0       	rjmp	.+428    	; 0x34ae <main+0xf38>
    3302:	fe 01       	movw	r30, r28
    3304:	e9 52       	subi	r30, 0x29	; 41
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	21 e0       	ldi	r18, 0x01	; 1
    330e:	87 38       	cpi	r24, 0x87	; 135
    3310:	92 07       	cpc	r25, r18
    3312:	08 f4       	brcc	.+2      	; 0x3316 <main+0xda0>
    3314:	cc c0       	rjmp	.+408    	; 0x34ae <main+0xf38>
    3316:	fe 01       	movw	r30, r28
    3318:	eb 52       	subi	r30, 0x2B	; 43
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	e1 e0       	ldi	r30, 0x01	; 1
    3322:	8d 32       	cpi	r24, 0x2D	; 45
    3324:	9e 07       	cpc	r25, r30
    3326:	08 f4       	brcc	.+2      	; 0x332a <main+0xdb4>
    3328:	c2 c0       	rjmp	.+388    	; 0x34ae <main+0xf38>
    332a:	fe 01       	movw	r30, r28
    332c:	ed 52       	subi	r30, 0x2D	; 45
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	87 39       	cpi	r24, 0x97	; 151
    3336:	91 05       	cpc	r25, r1
    3338:	08 f4       	brcc	.+2      	; 0x333c <main+0xdc6>
    333a:	b9 c0       	rjmp	.+370    	; 0x34ae <main+0xf38>
		{
			H_LCD_Void_LCDWriteString("Big");
    333c:	84 e9       	ldi	r24, 0x94	; 148
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3344:	fe 01       	movw	r30, r28
    3346:	e3 59       	subi	r30, 0x93	; 147
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	aa ef       	ldi	r26, 0xFA	; 250
    3350:	b3 e4       	ldi	r27, 0x43	; 67
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	8e 01       	movw	r16, r28
    335c:	07 59       	subi	r16, 0x97	; 151
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	fe 01       	movw	r30, r28
    3362:	e3 59       	subi	r30, 0x93	; 147
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	55 e4       	ldi	r21, 0x45	; 69
    3376:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	f8 01       	movw	r30, r16
    3380:	80 83       	st	Z, r24
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	a2 83       	std	Z+2, r26	; 0x02
    3386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3388:	fe 01       	movw	r30, r28
    338a:	e7 59       	subi	r30, 0x97	; 151
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	44 f4       	brge	.+16     	; 0x33b6 <main+0xe40>
		__ticks = 1;
    33a6:	fe 01       	movw	r30, r28
    33a8:	e9 59       	subi	r30, 0x99	; 153
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	64 c0       	rjmp	.+200    	; 0x347e <main+0xf08>
	else if (__tmp > 65535)
    33b6:	fe 01       	movw	r30, r28
    33b8:	e7 59       	subi	r30, 0x97	; 151
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	0c f0       	brlt	.+2      	; 0x33d6 <main+0xe60>
    33d4:	43 c0       	rjmp	.+134    	; 0x345c <main+0xee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	fe 01       	movw	r30, r28
    33d8:	e3 59       	subi	r30, 0x93	; 147
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8e 01       	movw	r16, r28
    33f6:	09 59       	subi	r16, 0x99	; 153
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	f8 01       	movw	r30, r16
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	1f c0       	rjmp	.+62     	; 0x344c <main+0xed6>
    340e:	fe 01       	movw	r30, r28
    3410:	eb 59       	subi	r30, 0x9B	; 155
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 e9       	ldi	r24, 0x90	; 144
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	fe 01       	movw	r30, r28
    341e:	eb 59       	subi	r30, 0x9B	; 155
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0xeb0>
    342a:	fe 01       	movw	r30, r28
    342c:	eb 59       	subi	r30, 0x9B	; 155
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	de 01       	movw	r26, r28
    3436:	a9 59       	subi	r26, 0x99	; 153
    3438:	bf 4f       	sbci	r27, 0xFF	; 255
    343a:	fe 01       	movw	r30, r28
    343c:	e9 59       	subi	r30, 0x99	; 153
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	fe 01       	movw	r30, r28
    344e:	e9 59       	subi	r30, 0x99	; 153
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	d1 f6       	brne	.-76     	; 0x340e <main+0xe98>
    345a:	b7 c8       	rjmp	.-3730   	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	8e 01       	movw	r16, r28
    345e:	09 59       	subi	r16, 0x99	; 153
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	fe 01       	movw	r30, r28
    3464:	e7 59       	subi	r30, 0x97	; 151
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	de 01       	movw	r26, r28
    3480:	ad 59       	subi	r26, 0x9D	; 157
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	e9 59       	subi	r30, 0x99	; 153
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	9c 93       	st	X, r25
    3492:	8e 93       	st	-X, r24
    3494:	fe 01       	movw	r30, r28
    3496:	ed 59       	subi	r30, 0x9D	; 157
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0xf28>
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 59       	subi	r30, 0x9D	; 157
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
    34ac:	8e c8       	rjmp	.-3812   	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    34ae:	fe 01       	movw	r30, r28
    34b0:	e5 52       	subi	r30, 0x25	; 37
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	82 34       	cpi	r24, 0x42	; 66
    34ba:	91 05       	cpc	r25, r1
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <main+0xf4a>
    34be:	e2 c0       	rjmp	.+452    	; 0x3684 <main+0x110e>
    34c0:	fe 01       	movw	r30, r28
    34c2:	e7 52       	subi	r30, 0x27	; 39
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 81       	ld	r24, Z
    34c8:	91 81       	ldd	r25, Z+1	; 0x01
    34ca:	f1 e0       	ldi	r31, 0x01	; 1
    34cc:	8c 37       	cpi	r24, 0x7C	; 124
    34ce:	9f 07       	cpc	r25, r31
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <main+0xf5e>
    34d2:	d8 c0       	rjmp	.+432    	; 0x3684 <main+0x110e>
    34d4:	fe 01       	movw	r30, r28
    34d6:	e9 52       	subi	r30, 0x29	; 41
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	21 e0       	ldi	r18, 0x01	; 1
    34e0:	86 38       	cpi	r24, 0x86	; 134
    34e2:	92 07       	cpc	r25, r18
    34e4:	08 f0       	brcs	.+2      	; 0x34e8 <main+0xf72>
    34e6:	ce c0       	rjmp	.+412    	; 0x3684 <main+0x110e>
    34e8:	fe 01       	movw	r30, r28
    34ea:	eb 52       	subi	r30, 0x2B	; 43
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	e1 e0       	ldi	r30, 0x01	; 1
    34f4:	8d 32       	cpi	r24, 0x2D	; 45
    34f6:	9e 07       	cpc	r25, r30
    34f8:	08 f4       	brcc	.+2      	; 0x34fc <main+0xf86>
    34fa:	c4 c0       	rjmp	.+392    	; 0x3684 <main+0x110e>
    34fc:	fe 01       	movw	r30, r28
    34fe:	ed 52       	subi	r30, 0x2D	; 45
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 81       	ld	r24, Z
    3504:	91 81       	ldd	r25, Z+1	; 0x01
    3506:	87 39       	cpi	r24, 0x97	; 151
    3508:	91 05       	cpc	r25, r1
    350a:	08 f4       	brcc	.+2      	; 0x350e <main+0xf98>
    350c:	bb c0       	rjmp	.+374    	; 0x3684 <main+0x110e>
		{
			H_LCD_Void_LCDWriteString("Call me");
    350e:	88 e9       	ldi	r24, 0x98	; 152
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3516:	fe 01       	movw	r30, r28
    3518:	e1 5a       	subi	r30, 0xA1	; 161
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	aa ef       	ldi	r26, 0xFA	; 250
    3522:	b3 e4       	ldi	r27, 0x43	; 67
    3524:	80 83       	st	Z, r24
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	a2 83       	std	Z+2, r26	; 0x02
    352a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352c:	8e 01       	movw	r16, r28
    352e:	05 5a       	subi	r16, 0xA5	; 165
    3530:	1f 4f       	sbci	r17, 0xFF	; 255
    3532:	fe 01       	movw	r30, r28
    3534:	e1 5a       	subi	r30, 0xA1	; 161
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	4a e7       	ldi	r20, 0x7A	; 122
    3546:	55 e4       	ldi	r21, 0x45	; 69
    3548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	f8 01       	movw	r30, r16
    3552:	80 83       	st	Z, r24
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	a2 83       	std	Z+2, r26	; 0x02
    3558:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    355a:	fe 01       	movw	r30, r28
    355c:	e5 5a       	subi	r30, 0xA5	; 165
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3574:	88 23       	and	r24, r24
    3576:	44 f4       	brge	.+16     	; 0x3588 <main+0x1012>
		__ticks = 1;
    3578:	fe 01       	movw	r30, r28
    357a:	e7 5a       	subi	r30, 0xA7	; 167
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	80 83       	st	Z, r24
    3586:	65 c0       	rjmp	.+202    	; 0x3652 <main+0x10dc>
	else if (__tmp > 65535)
    3588:	fe 01       	movw	r30, r28
    358a:	e5 5a       	subi	r30, 0xA5	; 165
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	3f ef       	ldi	r19, 0xFF	; 255
    359a:	4f e7       	ldi	r20, 0x7F	; 127
    359c:	57 e4       	ldi	r21, 0x47	; 71
    359e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    35a2:	18 16       	cp	r1, r24
    35a4:	0c f0       	brlt	.+2      	; 0x35a8 <main+0x1032>
    35a6:	44 c0       	rjmp	.+136    	; 0x3630 <main+0x10ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a8:	fe 01       	movw	r30, r28
    35aa:	e1 5a       	subi	r30, 0xA1	; 161
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e2       	ldi	r20, 0x20	; 32
    35bc:	51 e4       	ldi	r21, 0x41	; 65
    35be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	8e 01       	movw	r16, r28
    35c8:	07 5a       	subi	r16, 0xA7	; 167
    35ca:	1f 4f       	sbci	r17, 0xFF	; 255
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	f8 01       	movw	r30, r16
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	1f c0       	rjmp	.+62     	; 0x361e <main+0x10a8>
    35e0:	fe 01       	movw	r30, r28
    35e2:	e9 5a       	subi	r30, 0xA9	; 169
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 e9       	ldi	r24, 0x90	; 144
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	80 83       	st	Z, r24
    35ee:	fe 01       	movw	r30, r28
    35f0:	e9 5a       	subi	r30, 0xA9	; 169
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <main+0x1082>
    35fc:	fe 01       	movw	r30, r28
    35fe:	e9 5a       	subi	r30, 0xA9	; 169
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3606:	de 01       	movw	r26, r28
    3608:	a7 5a       	subi	r26, 0xA7	; 167
    360a:	bf 4f       	sbci	r27, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	e7 5a       	subi	r30, 0xA7	; 167
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	91 81       	ldd	r25, Z+1	; 0x01
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	11 96       	adiw	r26, 0x01	; 1
    361a:	9c 93       	st	X, r25
    361c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361e:	fe 01       	movw	r30, r28
    3620:	e7 5a       	subi	r30, 0xA7	; 167
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	91 81       	ldd	r25, Z+1	; 0x01
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	d1 f6       	brne	.-76     	; 0x35e0 <main+0x106a>
    362c:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	8e 01       	movw	r16, r28
    3632:	07 5a       	subi	r16, 0xA7	; 167
    3634:	1f 4f       	sbci	r17, 0xFF	; 255
    3636:	fe 01       	movw	r30, r28
    3638:	e5 5a       	subi	r30, 0xA5	; 165
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	60 81       	ld	r22, Z
    363e:	71 81       	ldd	r23, Z+1	; 0x01
    3640:	82 81       	ldd	r24, Z+2	; 0x02
    3642:	93 81       	ldd	r25, Z+3	; 0x03
    3644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	f8 01       	movw	r30, r16
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	de 01       	movw	r26, r28
    3654:	ab 5a       	subi	r26, 0xAB	; 171
    3656:	bf 4f       	sbci	r27, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	e7 5a       	subi	r30, 0xA7	; 167
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	11 96       	adiw	r26, 0x01	; 1
    3664:	9c 93       	st	X, r25
    3666:	8e 93       	st	-X, r24
    3668:	fe 01       	movw	r30, r28
    366a:	eb 5a       	subi	r30, 0xAB	; 171
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	80 81       	ld	r24, Z
    3670:	91 81       	ldd	r25, Z+1	; 0x01
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <main+0x10fc>
    3676:	fe 01       	movw	r30, r28
    3678:	eb 5a       	subi	r30, 0xAB	; 171
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	80 83       	st	Z, r24
    3680:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//3 Fingers used
		//print I love you if 2 fingers at middle not flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    3684:	fe 01       	movw	r30, r28
    3686:	e5 52       	subi	r30, 0x25	; 37
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	81 34       	cpi	r24, 0x41	; 65
    3690:	91 05       	cpc	r25, r1
    3692:	08 f0       	brcs	.+2      	; 0x3696 <main+0x1120>
    3694:	e2 c0       	rjmp	.+452    	; 0x385a <main+0x12e4>
    3696:	fe 01       	movw	r30, r28
    3698:	e7 52       	subi	r30, 0x27	; 39
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	80 81       	ld	r24, Z
    369e:	91 81       	ldd	r25, Z+1	; 0x01
    36a0:	f1 e0       	ldi	r31, 0x01	; 1
    36a2:	8d 37       	cpi	r24, 0x7D	; 125
    36a4:	9f 07       	cpc	r25, r31
    36a6:	08 f4       	brcc	.+2      	; 0x36aa <main+0x1134>
    36a8:	d8 c0       	rjmp	.+432    	; 0x385a <main+0x12e4>
    36aa:	fe 01       	movw	r30, r28
    36ac:	e9 52       	subi	r30, 0x29	; 41
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	21 e0       	ldi	r18, 0x01	; 1
    36b6:	87 38       	cpi	r24, 0x87	; 135
    36b8:	92 07       	cpc	r25, r18
    36ba:	08 f4       	brcc	.+2      	; 0x36be <main+0x1148>
    36bc:	ce c0       	rjmp	.+412    	; 0x385a <main+0x12e4>
    36be:	fe 01       	movw	r30, r28
    36c0:	eb 52       	subi	r30, 0x2B	; 43
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	e1 e0       	ldi	r30, 0x01	; 1
    36ca:	8d 32       	cpi	r24, 0x2D	; 45
    36cc:	9e 07       	cpc	r25, r30
    36ce:	08 f4       	brcc	.+2      	; 0x36d2 <main+0x115c>
    36d0:	c4 c0       	rjmp	.+392    	; 0x385a <main+0x12e4>
    36d2:	fe 01       	movw	r30, r28
    36d4:	ed 52       	subi	r30, 0x2D	; 45
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	87 39       	cpi	r24, 0x97	; 151
    36de:	91 05       	cpc	r25, r1
    36e0:	08 f4       	brcc	.+2      	; 0x36e4 <main+0x116e>
    36e2:	bb c0       	rjmp	.+374    	; 0x385a <main+0x12e4>
		{
			H_LCD_Void_LCDWriteString("I love you");
    36e4:	80 ea       	ldi	r24, 0xA0	; 160
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    36ec:	fe 01       	movw	r30, r28
    36ee:	ef 5a       	subi	r30, 0xAF	; 175
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	aa ef       	ldi	r26, 0xFA	; 250
    36f8:	b3 e4       	ldi	r27, 0x43	; 67
    36fa:	80 83       	st	Z, r24
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	a2 83       	std	Z+2, r26	; 0x02
    3700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3702:	8e 01       	movw	r16, r28
    3704:	03 5b       	subi	r16, 0xB3	; 179
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	ef 5a       	subi	r30, 0xAF	; 175
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	60 81       	ld	r22, Z
    3710:	71 81       	ldd	r23, Z+1	; 0x01
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	4a e7       	ldi	r20, 0x7A	; 122
    371c:	55 e4       	ldi	r21, 0x45	; 69
    371e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	f8 01       	movw	r30, r16
    3728:	80 83       	st	Z, r24
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	a2 83       	std	Z+2, r26	; 0x02
    372e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3730:	fe 01       	movw	r30, r28
    3732:	e3 5b       	subi	r30, 0xB3	; 179
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e8       	ldi	r20, 0x80	; 128
    3744:	5f e3       	ldi	r21, 0x3F	; 63
    3746:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    374a:	88 23       	and	r24, r24
    374c:	44 f4       	brge	.+16     	; 0x375e <main+0x11e8>
		__ticks = 1;
    374e:	fe 01       	movw	r30, r28
    3750:	e5 5b       	subi	r30, 0xB5	; 181
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	65 c0       	rjmp	.+202    	; 0x3828 <main+0x12b2>
	else if (__tmp > 65535)
    375e:	fe 01       	movw	r30, r28
    3760:	e3 5b       	subi	r30, 0xB3	; 179
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	3f ef       	ldi	r19, 0xFF	; 255
    3770:	4f e7       	ldi	r20, 0x7F	; 127
    3772:	57 e4       	ldi	r21, 0x47	; 71
    3774:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3778:	18 16       	cp	r1, r24
    377a:	0c f0       	brlt	.+2      	; 0x377e <main+0x1208>
    377c:	44 c0       	rjmp	.+136    	; 0x3806 <main+0x1290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	fe 01       	movw	r30, r28
    3780:	ef 5a       	subi	r30, 0xAF	; 175
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e2       	ldi	r20, 0x20	; 32
    3792:	51 e4       	ldi	r21, 0x41	; 65
    3794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8e 01       	movw	r16, r28
    379e:	05 5b       	subi	r16, 0xB5	; 181
    37a0:	1f 4f       	sbci	r17, 0xFF	; 255
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	f8 01       	movw	r30, r16
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	1f c0       	rjmp	.+62     	; 0x37f4 <main+0x127e>
    37b6:	fe 01       	movw	r30, r28
    37b8:	e7 5b       	subi	r30, 0xB7	; 183
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 e9       	ldi	r24, 0x90	; 144
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	80 83       	st	Z, r24
    37c4:	fe 01       	movw	r30, r28
    37c6:	e7 5b       	subi	r30, 0xB7	; 183
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	80 81       	ld	r24, Z
    37cc:	91 81       	ldd	r25, Z+1	; 0x01
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <main+0x1258>
    37d2:	fe 01       	movw	r30, r28
    37d4:	e7 5b       	subi	r30, 0xB7	; 183
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	91 83       	std	Z+1, r25	; 0x01
    37da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	de 01       	movw	r26, r28
    37de:	a5 5b       	subi	r26, 0xB5	; 181
    37e0:	bf 4f       	sbci	r27, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	e5 5b       	subi	r30, 0xB5	; 181
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	11 96       	adiw	r26, 0x01	; 1
    37f0:	9c 93       	st	X, r25
    37f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	fe 01       	movw	r30, r28
    37f6:	e5 5b       	subi	r30, 0xB5	; 181
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 81       	ld	r24, Z
    37fc:	91 81       	ldd	r25, Z+1	; 0x01
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	d1 f6       	brne	.-76     	; 0x37b6 <main+0x1240>
    3802:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3806:	8e 01       	movw	r16, r28
    3808:	05 5b       	subi	r16, 0xB5	; 181
    380a:	1f 4f       	sbci	r17, 0xFF	; 255
    380c:	fe 01       	movw	r30, r28
    380e:	e3 5b       	subi	r30, 0xB3	; 179
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	f8 01       	movw	r30, r16
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	de 01       	movw	r26, r28
    382a:	a9 5b       	subi	r26, 0xB9	; 185
    382c:	bf 4f       	sbci	r27, 0xFF	; 255
    382e:	fe 01       	movw	r30, r28
    3830:	e5 5b       	subi	r30, 0xB5	; 181
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	11 96       	adiw	r26, 0x01	; 1
    383a:	9c 93       	st	X, r25
    383c:	8e 93       	st	-X, r24
    383e:	fe 01       	movw	r30, r28
    3840:	e9 5b       	subi	r30, 0xB9	; 185
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <main+0x12d2>
    384c:	fe 01       	movw	r30, r28
    384e:	e9 5b       	subi	r30, 0xB9	; 185
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//print May I help you if 3 middle fingers flexed
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    385a:	fe 01       	movw	r30, r28
    385c:	e5 52       	subi	r30, 0x25	; 37
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	91 81       	ldd	r25, Z+1	; 0x01
    3864:	82 34       	cpi	r24, 0x42	; 66
    3866:	91 05       	cpc	r25, r1
    3868:	08 f4       	brcc	.+2      	; 0x386c <main+0x12f6>
    386a:	b3 c0       	rjmp	.+358    	; 0x39d2 <main+0x145c>
    386c:	fe 01       	movw	r30, r28
    386e:	e7 52       	subi	r30, 0x27	; 39
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	f1 e0       	ldi	r31, 0x01	; 1
    3878:	8c 37       	cpi	r24, 0x7C	; 124
    387a:	9f 07       	cpc	r25, r31
    387c:	08 f0       	brcs	.+2      	; 0x3880 <main+0x130a>
    387e:	a9 c0       	rjmp	.+338    	; 0x39d2 <main+0x145c>
    3880:	fe 01       	movw	r30, r28
    3882:	e9 52       	subi	r30, 0x29	; 41
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	21 e0       	ldi	r18, 0x01	; 1
    388c:	87 38       	cpi	r24, 0x87	; 135
    388e:	92 07       	cpc	r25, r18
    3890:	08 f4       	brcc	.+2      	; 0x3894 <main+0x131e>
    3892:	9f c0       	rjmp	.+318    	; 0x39d2 <main+0x145c>
    3894:	fe 01       	movw	r30, r28
    3896:	eb 52       	subi	r30, 0x2B	; 43
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
    389e:	e1 e0       	ldi	r30, 0x01	; 1
    38a0:	8c 32       	cpi	r24, 0x2C	; 44
    38a2:	9e 07       	cpc	r25, r30
    38a4:	08 f0       	brcs	.+2      	; 0x38a8 <main+0x1332>
    38a6:	95 c0       	rjmp	.+298    	; 0x39d2 <main+0x145c>
    38a8:	fe 01       	movw	r30, r28
    38aa:	ed 52       	subi	r30, 0x2D	; 45
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	91 81       	ldd	r25, Z+1	; 0x01
    38b2:	86 39       	cpi	r24, 0x96	; 150
    38b4:	91 05       	cpc	r25, r1
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <main+0x1344>
    38b8:	8c c0       	rjmp	.+280    	; 0x39d2 <main+0x145c>
		{
			H_LCD_Void_LCDWriteString("May I help you?");
    38ba:	8b ea       	ldi	r24, 0xAB	; 171
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    38c2:	fe 01       	movw	r30, r28
    38c4:	ed 5b       	subi	r30, 0xBD	; 189
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	aa ef       	ldi	r26, 0xFA	; 250
    38ce:	b3 e4       	ldi	r27, 0x43	; 67
    38d0:	80 83       	st	Z, r24
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	a2 83       	std	Z+2, r26	; 0x02
    38d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d8:	8e 01       	movw	r16, r28
    38da:	01 5c       	subi	r16, 0xC1	; 193
    38dc:	1f 4f       	sbci	r17, 0xFF	; 255
    38de:	fe 01       	movw	r30, r28
    38e0:	ed 5b       	subi	r30, 0xBD	; 189
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	60 81       	ld	r22, Z
    38e6:	71 81       	ldd	r23, Z+1	; 0x01
    38e8:	82 81       	ldd	r24, Z+2	; 0x02
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a e7       	ldi	r20, 0x7A	; 122
    38f2:	55 e4       	ldi	r21, 0x45	; 69
    38f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	f8 01       	movw	r30, r16
    38fe:	80 83       	st	Z, r24
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	a2 83       	std	Z+2, r26	; 0x02
    3904:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3906:	fe 01       	movw	r30, r28
    3908:	ff 96       	adiw	r30, 0x3f	; 63
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e8       	ldi	r20, 0x80	; 128
    3918:	5f e3       	ldi	r21, 0x3F	; 63
    391a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    391e:	88 23       	and	r24, r24
    3920:	2c f4       	brge	.+10     	; 0x392c <main+0x13b6>
		__ticks = 1;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	9e af       	std	Y+62, r25	; 0x3e
    3928:	8d af       	std	Y+61, r24	; 0x3d
    392a:	47 c0       	rjmp	.+142    	; 0x39ba <main+0x1444>
	else if (__tmp > 65535)
    392c:	fe 01       	movw	r30, r28
    392e:	ff 96       	adiw	r30, 0x3f	; 63
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	3f ef       	ldi	r19, 0xFF	; 255
    393c:	4f e7       	ldi	r20, 0x7F	; 127
    393e:	57 e4       	ldi	r21, 0x47	; 71
    3940:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3944:	18 16       	cp	r1, r24
    3946:	6c f5       	brge	.+90     	; 0x39a2 <main+0x142c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3948:	fe 01       	movw	r30, r28
    394a:	ed 5b       	subi	r30, 0xBD	; 189
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	60 81       	ld	r22, Z
    3950:	71 81       	ldd	r23, Z+1	; 0x01
    3952:	82 81       	ldd	r24, Z+2	; 0x02
    3954:	93 81       	ldd	r25, Z+3	; 0x03
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	9e af       	std	Y+62, r25	; 0x3e
    3974:	8d af       	std	Y+61, r24	; 0x3d
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <main+0x1420>
    3978:	80 e9       	ldi	r24, 0x90	; 144
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	9c af       	std	Y+60, r25	; 0x3c
    397e:	8b af       	std	Y+59, r24	; 0x3b
    3980:	8b ad       	ldd	r24, Y+59	; 0x3b
    3982:	9c ad       	ldd	r25, Y+60	; 0x3c
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <main+0x140e>
    3988:	9c af       	std	Y+60, r25	; 0x3c
    398a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398c:	8d ad       	ldd	r24, Y+61	; 0x3d
    398e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	9e af       	std	Y+62, r25	; 0x3e
    3994:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3996:	8d ad       	ldd	r24, Y+61	; 0x3d
    3998:	9e ad       	ldd	r25, Y+62	; 0x3e
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	69 f7       	brne	.-38     	; 0x3978 <main+0x1402>
    399e:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a2:	fe 01       	movw	r30, r28
    39a4:	ff 96       	adiw	r30, 0x3f	; 63
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	9e af       	std	Y+62, r25	; 0x3e
    39b8:	8d af       	std	Y+61, r24	; 0x3d
    39ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    39bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    39be:	9a af       	std	Y+58, r25	; 0x3a
    39c0:	89 af       	std	Y+57, r24	; 0x39
    39c2:	89 ad       	ldd	r24, Y+57	; 0x39
    39c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <main+0x1450>
    39ca:	9a af       	std	Y+58, r25	; 0x3a
    39cc:	89 af       	std	Y+57, r24	; 0x39
    39ce:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    39d2:	fe 01       	movw	r30, r28
    39d4:	e5 52       	subi	r30, 0x25	; 37
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	81 34       	cpi	r24, 0x41	; 65
    39de:	91 05       	cpc	r25, r1
    39e0:	08 f0       	brcs	.+2      	; 0x39e4 <main+0x146e>
    39e2:	a0 c0       	rjmp	.+320    	; 0x3b24 <main+0x15ae>
    39e4:	fe 01       	movw	r30, r28
    39e6:	e7 52       	subi	r30, 0x27	; 39
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	f1 e0       	ldi	r31, 0x01	; 1
    39f0:	8c 37       	cpi	r24, 0x7C	; 124
    39f2:	9f 07       	cpc	r25, r31
    39f4:	08 f0       	brcs	.+2      	; 0x39f8 <main+0x1482>
    39f6:	96 c0       	rjmp	.+300    	; 0x3b24 <main+0x15ae>
    39f8:	fe 01       	movw	r30, r28
    39fa:	e9 52       	subi	r30, 0x29	; 41
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	21 e0       	ldi	r18, 0x01	; 1
    3a04:	86 38       	cpi	r24, 0x86	; 134
    3a06:	92 07       	cpc	r25, r18
    3a08:	08 f0       	brcs	.+2      	; 0x3a0c <main+0x1496>
    3a0a:	8c c0       	rjmp	.+280    	; 0x3b24 <main+0x15ae>
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	eb 52       	subi	r30, 0x2B	; 43
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	e1 e0       	ldi	r30, 0x01	; 1
    3a18:	8c 32       	cpi	r24, 0x2C	; 44
    3a1a:	9e 07       	cpc	r25, r30
    3a1c:	08 f0       	brcs	.+2      	; 0x3a20 <main+0x14aa>
    3a1e:	82 c0       	rjmp	.+260    	; 0x3b24 <main+0x15ae>
    3a20:	fe 01       	movw	r30, r28
    3a22:	ed 52       	subi	r30, 0x2D	; 45
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	86 39       	cpi	r24, 0x96	; 150
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	08 f0       	brcs	.+2      	; 0x3a32 <main+0x14bc>
    3a30:	79 c0       	rjmp	.+242    	; 0x3b24 <main+0x15ae>
		{
			H_LCD_Void_LCDWriteString("Perfect");
    3a32:	8b eb       	ldi	r24, 0xBB	; 187
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	aa ef       	ldi	r26, 0xFA	; 250
    3a40:	b3 e4       	ldi	r27, 0x43	; 67
    3a42:	8d ab       	std	Y+53, r24	; 0x35
    3a44:	9e ab       	std	Y+54, r25	; 0x36
    3a46:	af ab       	std	Y+55, r26	; 0x37
    3a48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a4c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a4e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a50:	98 ad       	ldd	r25, Y+56	; 0x38
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	4a e7       	ldi	r20, 0x7A	; 122
    3a58:	55 e4       	ldi	r21, 0x45	; 69
    3a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	89 ab       	std	Y+49, r24	; 0x31
    3a64:	9a ab       	std	Y+50, r25	; 0x32
    3a66:	ab ab       	std	Y+51, r26	; 0x33
    3a68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a6a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a6c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a6e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a70:	9c a9       	ldd	r25, Y+52	; 0x34
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	5f e3       	ldi	r21, 0x3F	; 63
    3a7a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3a7e:	88 23       	and	r24, r24
    3a80:	2c f4       	brge	.+10     	; 0x3a8c <main+0x1516>
		__ticks = 1;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	98 ab       	std	Y+48, r25	; 0x30
    3a88:	8f a7       	std	Y+47, r24	; 0x2f
    3a8a:	40 c0       	rjmp	.+128    	; 0x3b0c <main+0x1596>
	else if (__tmp > 65535)
    3a8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a90:	8b a9       	ldd	r24, Y+51	; 0x33
    3a92:	9c a9       	ldd	r25, Y+52	; 0x34
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	4f e7       	ldi	r20, 0x7F	; 127
    3a9a:	57 e4       	ldi	r21, 0x47	; 71
    3a9c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3aa0:	18 16       	cp	r1, r24
    3aa2:	54 f5       	brge	.+84     	; 0x3af8 <main+0x1582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa4:	6d a9       	ldd	r22, Y+53	; 0x35
    3aa6:	7e a9       	ldd	r23, Y+54	; 0x36
    3aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    3aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	98 ab       	std	Y+48, r25	; 0x30
    3aca:	8f a7       	std	Y+47, r24	; 0x2f
    3acc:	0f c0       	rjmp	.+30     	; 0x3aec <main+0x1576>
    3ace:	80 e9       	ldi	r24, 0x90	; 144
    3ad0:	91 e0       	ldi	r25, 0x01	; 1
    3ad2:	9e a7       	std	Y+46, r25	; 0x2e
    3ad4:	8d a7       	std	Y+45, r24	; 0x2d
    3ad6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ad8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <main+0x1564>
    3ade:	9e a7       	std	Y+46, r25	; 0x2e
    3ae0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	98 ab       	std	Y+48, r25	; 0x30
    3aea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aee:	98 a9       	ldd	r25, Y+48	; 0x30
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	69 f7       	brne	.-38     	; 0x3ace <main+0x1558>
    3af4:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af8:	69 a9       	ldd	r22, Y+49	; 0x31
    3afa:	7a a9       	ldd	r23, Y+50	; 0x32
    3afc:	8b a9       	ldd	r24, Y+51	; 0x33
    3afe:	9c a9       	ldd	r25, Y+52	; 0x34
    3b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	98 ab       	std	Y+48, r25	; 0x30
    3b0a:	8f a7       	std	Y+47, r24	; 0x2f
    3b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b10:	9c a7       	std	Y+44, r25	; 0x2c
    3b12:	8b a7       	std	Y+43, r24	; 0x2b
    3b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b16:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <main+0x15a2>
    3b1c:	9c a7       	std	Y+44, r25	; 0x2c
    3b1e:	8b a7       	std	Y+43, r24	; 0x2b
    3b20:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    3b24:	fe 01       	movw	r30, r28
    3b26:	e5 52       	subi	r30, 0x25	; 37
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 81       	ld	r24, Z
    3b2c:	91 81       	ldd	r25, Z+1	; 0x01
    3b2e:	82 34       	cpi	r24, 0x42	; 66
    3b30:	91 05       	cpc	r25, r1
    3b32:	08 f4       	brcc	.+2      	; 0x3b36 <main+0x15c0>
    3b34:	a0 c0       	rjmp	.+320    	; 0x3c76 <main+0x1700>
    3b36:	fe 01       	movw	r30, r28
    3b38:	e7 52       	subi	r30, 0x27	; 39
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	80 81       	ld	r24, Z
    3b3e:	91 81       	ldd	r25, Z+1	; 0x01
    3b40:	f1 e0       	ldi	r31, 0x01	; 1
    3b42:	8d 37       	cpi	r24, 0x7D	; 125
    3b44:	9f 07       	cpc	r25, r31
    3b46:	08 f4       	brcc	.+2      	; 0x3b4a <main+0x15d4>
    3b48:	96 c0       	rjmp	.+300    	; 0x3c76 <main+0x1700>
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e9 52       	subi	r30, 0x29	; 41
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	21 e0       	ldi	r18, 0x01	; 1
    3b56:	87 38       	cpi	r24, 0x87	; 135
    3b58:	92 07       	cpc	r25, r18
    3b5a:	08 f4       	brcc	.+2      	; 0x3b5e <main+0x15e8>
    3b5c:	8c c0       	rjmp	.+280    	; 0x3c76 <main+0x1700>
    3b5e:	fe 01       	movw	r30, r28
    3b60:	eb 52       	subi	r30, 0x2B	; 43
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	e1 e0       	ldi	r30, 0x01	; 1
    3b6a:	8c 32       	cpi	r24, 0x2C	; 44
    3b6c:	9e 07       	cpc	r25, r30
    3b6e:	08 f0       	brcs	.+2      	; 0x3b72 <main+0x15fc>
    3b70:	82 c0       	rjmp	.+260    	; 0x3c76 <main+0x1700>
    3b72:	fe 01       	movw	r30, r28
    3b74:	ed 52       	subi	r30, 0x2D	; 45
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	87 39       	cpi	r24, 0x97	; 151
    3b7e:	91 05       	cpc	r25, r1
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <main+0x160e>
    3b82:	79 c0       	rjmp	.+242    	; 0x3c76 <main+0x1700>
		{
			H_LCD_Void_LCDWriteString("Bang Bang");
    3b84:	83 ec       	ldi	r24, 0xC3	; 195
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	aa ef       	ldi	r26, 0xFA	; 250
    3b92:	b3 e4       	ldi	r27, 0x43	; 67
    3b94:	8f a3       	std	Y+39, r24	; 0x27
    3b96:	98 a7       	std	Y+40, r25	; 0x28
    3b98:	a9 a7       	std	Y+41, r26	; 0x29
    3b9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    3b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    3ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a e7       	ldi	r20, 0x7A	; 122
    3baa:	55 e4       	ldi	r21, 0x45	; 69
    3bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	8b a3       	std	Y+35, r24	; 0x23
    3bb6:	9c a3       	std	Y+36, r25	; 0x24
    3bb8:	ad a3       	std	Y+37, r26	; 0x25
    3bba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e8       	ldi	r20, 0x80	; 128
    3bca:	5f e3       	ldi	r21, 0x3F	; 63
    3bcc:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3bd0:	88 23       	and	r24, r24
    3bd2:	2c f4       	brge	.+10     	; 0x3bde <main+0x1668>
		__ticks = 1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	9a a3       	std	Y+34, r25	; 0x22
    3bda:	89 a3       	std	Y+33, r24	; 0x21
    3bdc:	40 c0       	rjmp	.+128    	; 0x3c5e <main+0x16e8>
	else if (__tmp > 65535)
    3bde:	6b a1       	ldd	r22, Y+35	; 0x23
    3be0:	7c a1       	ldd	r23, Y+36	; 0x24
    3be2:	8d a1       	ldd	r24, Y+37	; 0x25
    3be4:	9e a1       	ldd	r25, Y+38	; 0x26
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	3f ef       	ldi	r19, 0xFF	; 255
    3bea:	4f e7       	ldi	r20, 0x7F	; 127
    3bec:	57 e4       	ldi	r21, 0x47	; 71
    3bee:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3bf2:	18 16       	cp	r1, r24
    3bf4:	54 f5       	brge	.+84     	; 0x3c4a <main+0x16d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	6f a1       	ldd	r22, Y+39	; 0x27
    3bf8:	78 a5       	ldd	r23, Y+40	; 0x28
    3bfa:	89 a5       	ldd	r24, Y+41	; 0x29
    3bfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e2       	ldi	r20, 0x20	; 32
    3c04:	51 e4       	ldi	r21, 0x41	; 65
    3c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	9a a3       	std	Y+34, r25	; 0x22
    3c1c:	89 a3       	std	Y+33, r24	; 0x21
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <main+0x16c8>
    3c20:	80 e9       	ldi	r24, 0x90	; 144
    3c22:	91 e0       	ldi	r25, 0x01	; 1
    3c24:	98 a3       	std	Y+32, r25	; 0x20
    3c26:	8f 8f       	std	Y+31, r24	; 0x1f
    3c28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c2a:	98 a1       	ldd	r25, Y+32	; 0x20
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <main+0x16b6>
    3c30:	98 a3       	std	Y+32, r25	; 0x20
    3c32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c34:	89 a1       	ldd	r24, Y+33	; 0x21
    3c36:	9a a1       	ldd	r25, Y+34	; 0x22
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	9a a3       	std	Y+34, r25	; 0x22
    3c3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c40:	9a a1       	ldd	r25, Y+34	; 0x22
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f7       	brne	.-38     	; 0x3c20 <main+0x16aa>
    3c46:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c50:	9e a1       	ldd	r25, Y+38	; 0x26
    3c52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9a a3       	std	Y+34, r25	; 0x22
    3c5c:	89 a3       	std	Y+33, r24	; 0x21
    3c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c60:	9a a1       	ldd	r25, Y+34	; 0x22
    3c62:	9e 8f       	std	Y+30, r25	; 0x1e
    3c64:	8d 8f       	std	Y+29, r24	; 0x1d
    3c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <main+0x16f4>
    3c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3c70:	8d 8f       	std	Y+29, r24	; 0x1d
    3c72:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//4 Fingers used
		//print Nice to meet you if only thumb not flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    3c76:	fe 01       	movw	r30, r28
    3c78:	e5 52       	subi	r30, 0x25	; 37
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 81       	ld	r24, Z
    3c7e:	91 81       	ldd	r25, Z+1	; 0x01
    3c80:	81 34       	cpi	r24, 0x41	; 65
    3c82:	91 05       	cpc	r25, r1
    3c84:	08 f0       	brcs	.+2      	; 0x3c88 <main+0x1712>
    3c86:	a0 c0       	rjmp	.+320    	; 0x3dc8 <main+0x1852>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e7 52       	subi	r30, 0x27	; 39
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	f1 e0       	ldi	r31, 0x01	; 1
    3c94:	8c 37       	cpi	r24, 0x7C	; 124
    3c96:	9f 07       	cpc	r25, r31
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <main+0x1726>
    3c9a:	96 c0       	rjmp	.+300    	; 0x3dc8 <main+0x1852>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e9 52       	subi	r30, 0x29	; 41
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	21 e0       	ldi	r18, 0x01	; 1
    3ca8:	87 38       	cpi	r24, 0x87	; 135
    3caa:	92 07       	cpc	r25, r18
    3cac:	08 f4       	brcc	.+2      	; 0x3cb0 <main+0x173a>
    3cae:	8c c0       	rjmp	.+280    	; 0x3dc8 <main+0x1852>
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	eb 52       	subi	r30, 0x2B	; 43
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	e1 e0       	ldi	r30, 0x01	; 1
    3cbc:	8c 32       	cpi	r24, 0x2C	; 44
    3cbe:	9e 07       	cpc	r25, r30
    3cc0:	08 f0       	brcs	.+2      	; 0x3cc4 <main+0x174e>
    3cc2:	82 c0       	rjmp	.+260    	; 0x3dc8 <main+0x1852>
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ed 52       	subi	r30, 0x2D	; 45
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	86 39       	cpi	r24, 0x96	; 150
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	08 f0       	brcs	.+2      	; 0x3cd6 <main+0x1760>
    3cd4:	79 c0       	rjmp	.+242    	; 0x3dc8 <main+0x1852>
		{
			H_LCD_Void_LCDWriteString("Nice to meet you");
    3cd6:	8c e7       	ldi	r24, 0x7C	; 124
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	aa ef       	ldi	r26, 0xFA	; 250
    3ce4:	b3 e4       	ldi	r27, 0x43	; 67
    3ce6:	89 8f       	std	Y+25, r24	; 0x19
    3ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cea:	ab 8f       	std	Y+27, r26	; 0x1b
    3cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a e7       	ldi	r20, 0x7A	; 122
    3cfc:	55 e4       	ldi	r21, 0x45	; 69
    3cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	8d 8b       	std	Y+21, r24	; 0x15
    3d08:	9e 8b       	std	Y+22, r25	; 0x16
    3d0a:	af 8b       	std	Y+23, r26	; 0x17
    3d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d10:	7e 89       	ldd	r23, Y+22	; 0x16
    3d12:	8f 89       	ldd	r24, Y+23	; 0x17
    3d14:	98 8d       	ldd	r25, Y+24	; 0x18
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <main+0x17ba>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9c 8b       	std	Y+20, r25	; 0x14
    3d2c:	8b 8b       	std	Y+19, r24	; 0x13
    3d2e:	40 c0       	rjmp	.+128    	; 0x3db0 <main+0x183a>
	else if (__tmp > 65535)
    3d30:	6d 89       	ldd	r22, Y+21	; 0x15
    3d32:	7e 89       	ldd	r23, Y+22	; 0x16
    3d34:	8f 89       	ldd	r24, Y+23	; 0x17
    3d36:	98 8d       	ldd	r25, Y+24	; 0x18
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	54 f5       	brge	.+84     	; 0x3d9c <main+0x1826>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9c 8b       	std	Y+20, r25	; 0x14
    3d6e:	8b 8b       	std	Y+19, r24	; 0x13
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <main+0x181a>
    3d72:	80 e9       	ldi	r24, 0x90	; 144
    3d74:	91 e0       	ldi	r25, 0x01	; 1
    3d76:	9a 8b       	std	Y+18, r25	; 0x12
    3d78:	89 8b       	std	Y+17, r24	; 0x11
    3d7a:	89 89       	ldd	r24, Y+17	; 0x11
    3d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <main+0x1808>
    3d82:	9a 8b       	std	Y+18, r25	; 0x12
    3d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	9c 8b       	std	Y+20, r25	; 0x14
    3d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8b 89       	ldd	r24, Y+19	; 0x13
    3d92:	9c 89       	ldd	r25, Y+20	; 0x14
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <main+0x17fc>
    3d98:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    3da0:	8f 89       	ldd	r24, Y+23	; 0x17
    3da2:	98 8d       	ldd	r25, Y+24	; 0x18
    3da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	9c 8b       	std	Y+20, r25	; 0x14
    3dae:	8b 8b       	std	Y+19, r24	; 0x13
    3db0:	8b 89       	ldd	r24, Y+19	; 0x13
    3db2:	9c 89       	ldd	r25, Y+20	; 0x14
    3db4:	98 8b       	std	Y+16, r25	; 0x10
    3db6:	8f 87       	std	Y+15, r24	; 0x0f
    3db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dba:	98 89       	ldd	r25, Y+16	; 0x10
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <main+0x1846>
    3dc0:	98 8b       	std	Y+16, r25	; 0x10
    3dc2:	8f 87       	std	Y+15, r24	; 0x0f
    3dc4:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			_delay_ms(500);
		}
		//5 Fingers used
		//print See you later when all fingers are flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e5 52       	subi	r30, 0x25	; 37
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	81 34       	cpi	r24, 0x41	; 65
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	10 f0       	brcs	.+4      	; 0x3ddc <main+0x1866>
    3dd8:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e7 52       	subi	r30, 0x27	; 39
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	f1 e0       	ldi	r31, 0x01	; 1
    3de8:	8d 37       	cpi	r24, 0x7D	; 125
    3dea:	9f 07       	cpc	r25, r31
    3dec:	10 f4       	brcc	.+4      	; 0x3df2 <main+0x187c>
    3dee:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
    3df2:	fe 01       	movw	r30, r28
    3df4:	e9 52       	subi	r30, 0x29	; 41
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	21 e0       	ldi	r18, 0x01	; 1
    3dfe:	87 38       	cpi	r24, 0x87	; 135
    3e00:	92 07       	cpc	r25, r18
    3e02:	10 f4       	brcc	.+4      	; 0x3e08 <main+0x1892>
    3e04:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	eb 52       	subi	r30, 0x2B	; 43
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 81       	ld	r24, Z
    3e10:	91 81       	ldd	r25, Z+1	; 0x01
    3e12:	e1 e0       	ldi	r30, 0x01	; 1
    3e14:	8c 32       	cpi	r24, 0x2C	; 44
    3e16:	9e 07       	cpc	r25, r30
    3e18:	10 f0       	brcs	.+4      	; 0x3e1e <main+0x18a8>
    3e1a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
    3e1e:	fe 01       	movw	r30, r28
    3e20:	ed 52       	subi	r30, 0x2D	; 45
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	86 39       	cpi	r24, 0x96	; 150
    3e2a:	91 05       	cpc	r25, r1
    3e2c:	10 f0       	brcs	.+4      	; 0x3e32 <main+0x18bc>
    3e2e:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
		{
			H_LCD_Void_LCDWriteString("See you later");
    3e32:	8d ec       	ldi	r24, 0xCD	; 205
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <H_LCD_Void_LCDWriteString>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	aa ef       	ldi	r26, 0xFA	; 250
    3e40:	b3 e4       	ldi	r27, 0x43	; 67
    3e42:	8b 87       	std	Y+11, r24	; 0x0b
    3e44:	9c 87       	std	Y+12, r25	; 0x0c
    3e46:	ad 87       	std	Y+13, r26	; 0x0d
    3e48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	4a e7       	ldi	r20, 0x7A	; 122
    3e58:	55 e4       	ldi	r21, 0x45	; 69
    3e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	8f 83       	std	Y+7, r24	; 0x07
    3e64:	98 87       	std	Y+8, r25	; 0x08
    3e66:	a9 87       	std	Y+9, r26	; 0x09
    3e68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6c:	78 85       	ldd	r23, Y+8	; 0x08
    3e6e:	89 85       	ldd	r24, Y+9	; 0x09
    3e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e8       	ldi	r20, 0x80	; 128
    3e78:	5f e3       	ldi	r21, 0x3F	; 63
    3e7a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    3e7e:	88 23       	and	r24, r24
    3e80:	2c f4       	brge	.+10     	; 0x3e8c <main+0x1916>
		__ticks = 1;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	9e 83       	std	Y+6, r25	; 0x06
    3e88:	8d 83       	std	Y+5, r24	; 0x05
    3e8a:	40 c0       	rjmp	.+128    	; 0x3f0c <main+0x1996>
	else if (__tmp > 65535)
    3e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8e:	78 85       	ldd	r23, Y+8	; 0x08
    3e90:	89 85       	ldd	r24, Y+9	; 0x09
    3e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	54 f5       	brge	.+84     	; 0x3ef8 <main+0x1982>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e2       	ldi	r20, 0x20	; 32
    3eb2:	51 e4       	ldi	r21, 0x41	; 65
    3eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <main+0x1976>
    3ece:	80 e9       	ldi	r24, 0x90	; 144
    3ed0:	91 e0       	ldi	r25, 0x01	; 1
    3ed2:	9c 83       	std	Y+4, r25	; 0x04
    3ed4:	8b 83       	std	Y+3, r24	; 0x03
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <main+0x1964>
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	9e 83       	std	Y+6, r25	; 0x06
    3eea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eec:	8d 81       	ldd	r24, Y+5	; 0x05
    3eee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	69 f7       	brne	.-38     	; 0x3ece <main+0x1958>
    3ef4:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    3efa:	78 85       	ldd	r23, Y+8	; 0x08
    3efc:	89 85       	ldd	r24, Y+9	; 0x09
    3efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	9e 83       	std	Y+6, r25	; 0x06
    3f0a:	8d 83       	std	Y+5, r24	; 0x05
    3f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f10:	9a 83       	std	Y+2, r25	; 0x02
    3f12:	89 83       	std	Y+1, r24	; 0x01
    3f14:	89 81       	ldd	r24, Y+1	; 0x01
    3f16:	9a 81       	ldd	r25, Y+2	; 0x02
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	f1 f7       	brne	.-4      	; 0x3f18 <main+0x19a2>
    3f1c:	9a 83       	std	Y+2, r25	; 0x02
    3f1e:	89 83       	std	Y+1, r24	; 0x01
    3f20:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <main+0x54>

00003f24 <__udivmodqi4>:
    3f24:	99 1b       	sub	r25, r25
    3f26:	79 e0       	ldi	r23, 0x09	; 9
    3f28:	04 c0       	rjmp	.+8      	; 0x3f32 <__udivmodqi4_ep>

00003f2a <__udivmodqi4_loop>:
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	96 17       	cp	r25, r22
    3f2e:	08 f0       	brcs	.+2      	; 0x3f32 <__udivmodqi4_ep>
    3f30:	96 1b       	sub	r25, r22

00003f32 <__udivmodqi4_ep>:
    3f32:	88 1f       	adc	r24, r24
    3f34:	7a 95       	dec	r23
    3f36:	c9 f7       	brne	.-14     	; 0x3f2a <__udivmodqi4_loop>
    3f38:	80 95       	com	r24
    3f3a:	08 95       	ret

00003f3c <__divmodhi4>:
    3f3c:	97 fb       	bst	r25, 7
    3f3e:	09 2e       	mov	r0, r25
    3f40:	07 26       	eor	r0, r23
    3f42:	0a d0       	rcall	.+20     	; 0x3f58 <__divmodhi4_neg1>
    3f44:	77 fd       	sbrc	r23, 7
    3f46:	04 d0       	rcall	.+8      	; 0x3f50 <__divmodhi4_neg2>
    3f48:	27 d0       	rcall	.+78     	; 0x3f98 <__udivmodhi4>
    3f4a:	06 d0       	rcall	.+12     	; 0x3f58 <__divmodhi4_neg1>
    3f4c:	00 20       	and	r0, r0
    3f4e:	1a f4       	brpl	.+6      	; 0x3f56 <__divmodhi4_exit>

00003f50 <__divmodhi4_neg2>:
    3f50:	70 95       	com	r23
    3f52:	61 95       	neg	r22
    3f54:	7f 4f       	sbci	r23, 0xFF	; 255

00003f56 <__divmodhi4_exit>:
    3f56:	08 95       	ret

00003f58 <__divmodhi4_neg1>:
    3f58:	f6 f7       	brtc	.-4      	; 0x3f56 <__divmodhi4_exit>
    3f5a:	90 95       	com	r25
    3f5c:	81 95       	neg	r24
    3f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f60:	08 95       	ret

00003f62 <__divmodsi4>:
    3f62:	97 fb       	bst	r25, 7
    3f64:	09 2e       	mov	r0, r25
    3f66:	05 26       	eor	r0, r21
    3f68:	0e d0       	rcall	.+28     	; 0x3f86 <__divmodsi4_neg1>
    3f6a:	57 fd       	sbrc	r21, 7
    3f6c:	04 d0       	rcall	.+8      	; 0x3f76 <__divmodsi4_neg2>
    3f6e:	28 d0       	rcall	.+80     	; 0x3fc0 <__udivmodsi4>
    3f70:	0a d0       	rcall	.+20     	; 0x3f86 <__divmodsi4_neg1>
    3f72:	00 1c       	adc	r0, r0
    3f74:	38 f4       	brcc	.+14     	; 0x3f84 <__divmodsi4_exit>

00003f76 <__divmodsi4_neg2>:
    3f76:	50 95       	com	r21
    3f78:	40 95       	com	r20
    3f7a:	30 95       	com	r19
    3f7c:	21 95       	neg	r18
    3f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f80:	4f 4f       	sbci	r20, 0xFF	; 255
    3f82:	5f 4f       	sbci	r21, 0xFF	; 255

00003f84 <__divmodsi4_exit>:
    3f84:	08 95       	ret

00003f86 <__divmodsi4_neg1>:
    3f86:	f6 f7       	brtc	.-4      	; 0x3f84 <__divmodsi4_exit>
    3f88:	90 95       	com	r25
    3f8a:	80 95       	com	r24
    3f8c:	70 95       	com	r23
    3f8e:	61 95       	neg	r22
    3f90:	7f 4f       	sbci	r23, 0xFF	; 255
    3f92:	8f 4f       	sbci	r24, 0xFF	; 255
    3f94:	9f 4f       	sbci	r25, 0xFF	; 255
    3f96:	08 95       	ret

00003f98 <__udivmodhi4>:
    3f98:	aa 1b       	sub	r26, r26
    3f9a:	bb 1b       	sub	r27, r27
    3f9c:	51 e1       	ldi	r21, 0x11	; 17
    3f9e:	07 c0       	rjmp	.+14     	; 0x3fae <__udivmodhi4_ep>

00003fa0 <__udivmodhi4_loop>:
    3fa0:	aa 1f       	adc	r26, r26
    3fa2:	bb 1f       	adc	r27, r27
    3fa4:	a6 17       	cp	r26, r22
    3fa6:	b7 07       	cpc	r27, r23
    3fa8:	10 f0       	brcs	.+4      	; 0x3fae <__udivmodhi4_ep>
    3faa:	a6 1b       	sub	r26, r22
    3fac:	b7 0b       	sbc	r27, r23

00003fae <__udivmodhi4_ep>:
    3fae:	88 1f       	adc	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	5a 95       	dec	r21
    3fb4:	a9 f7       	brne	.-22     	; 0x3fa0 <__udivmodhi4_loop>
    3fb6:	80 95       	com	r24
    3fb8:	90 95       	com	r25
    3fba:	bc 01       	movw	r22, r24
    3fbc:	cd 01       	movw	r24, r26
    3fbe:	08 95       	ret

00003fc0 <__udivmodsi4>:
    3fc0:	a1 e2       	ldi	r26, 0x21	; 33
    3fc2:	1a 2e       	mov	r1, r26
    3fc4:	aa 1b       	sub	r26, r26
    3fc6:	bb 1b       	sub	r27, r27
    3fc8:	fd 01       	movw	r30, r26
    3fca:	0d c0       	rjmp	.+26     	; 0x3fe6 <__udivmodsi4_ep>

00003fcc <__udivmodsi4_loop>:
    3fcc:	aa 1f       	adc	r26, r26
    3fce:	bb 1f       	adc	r27, r27
    3fd0:	ee 1f       	adc	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	a2 17       	cp	r26, r18
    3fd6:	b3 07       	cpc	r27, r19
    3fd8:	e4 07       	cpc	r30, r20
    3fda:	f5 07       	cpc	r31, r21
    3fdc:	20 f0       	brcs	.+8      	; 0x3fe6 <__udivmodsi4_ep>
    3fde:	a2 1b       	sub	r26, r18
    3fe0:	b3 0b       	sbc	r27, r19
    3fe2:	e4 0b       	sbc	r30, r20
    3fe4:	f5 0b       	sbc	r31, r21

00003fe6 <__udivmodsi4_ep>:
    3fe6:	66 1f       	adc	r22, r22
    3fe8:	77 1f       	adc	r23, r23
    3fea:	88 1f       	adc	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	1a 94       	dec	r1
    3ff0:	69 f7       	brne	.-38     	; 0x3fcc <__udivmodsi4_loop>
    3ff2:	60 95       	com	r22
    3ff4:	70 95       	com	r23
    3ff6:	80 95       	com	r24
    3ff8:	90 95       	com	r25
    3ffa:	9b 01       	movw	r18, r22
    3ffc:	ac 01       	movw	r20, r24
    3ffe:	bd 01       	movw	r22, r26
    4000:	cf 01       	movw	r24, r30
    4002:	08 95       	ret

00004004 <__prologue_saves__>:
    4004:	2f 92       	push	r2
    4006:	3f 92       	push	r3
    4008:	4f 92       	push	r4
    400a:	5f 92       	push	r5
    400c:	6f 92       	push	r6
    400e:	7f 92       	push	r7
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	bf 92       	push	r11
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	ca 1b       	sub	r28, r26
    402e:	db 0b       	sbc	r29, r27
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	09 94       	ijmp

0000403c <__epilogue_restores__>:
    403c:	2a 88       	ldd	r2, Y+18	; 0x12
    403e:	39 88       	ldd	r3, Y+17	; 0x11
    4040:	48 88       	ldd	r4, Y+16	; 0x10
    4042:	5f 84       	ldd	r5, Y+15	; 0x0f
    4044:	6e 84       	ldd	r6, Y+14	; 0x0e
    4046:	7d 84       	ldd	r7, Y+13	; 0x0d
    4048:	8c 84       	ldd	r8, Y+12	; 0x0c
    404a:	9b 84       	ldd	r9, Y+11	; 0x0b
    404c:	aa 84       	ldd	r10, Y+10	; 0x0a
    404e:	b9 84       	ldd	r11, Y+9	; 0x09
    4050:	c8 84       	ldd	r12, Y+8	; 0x08
    4052:	df 80       	ldd	r13, Y+7	; 0x07
    4054:	ee 80       	ldd	r14, Y+6	; 0x06
    4056:	fd 80       	ldd	r15, Y+5	; 0x05
    4058:	0c 81       	ldd	r16, Y+4	; 0x04
    405a:	1b 81       	ldd	r17, Y+3	; 0x03
    405c:	aa 81       	ldd	r26, Y+2	; 0x02
    405e:	b9 81       	ldd	r27, Y+1	; 0x01
    4060:	ce 0f       	add	r28, r30
    4062:	d1 1d       	adc	r29, r1
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	ed 01       	movw	r28, r26
    4070:	08 95       	ret

00004072 <_exit>:
    4072:	f8 94       	cli

00004074 <__stop_program>:
    4074:	ff cf       	rjmp	.-2      	; 0x4074 <__stop_program>
